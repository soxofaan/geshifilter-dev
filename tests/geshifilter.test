<?php
// $Id$

/**
* Unit tests for the GeSHi filter module.
*/
class GeshiFilterTest extends DrupalTestCase {

  /**
   * A global filter adminstrator
   */
  var $filter_admin_user;

  /**
   * A global user for adding pages
   */
  var $normal_user;

  /**
   * The id of the input format with only GeSHi filter in it
   */
  var $input_format_id;

  /**
   * Drupal SimpleTest method: return metadata about the test.
   */
  function get_info() {
    return array(
      'name'  => t('GeSHi input filter'),
      'desc'  => t('Test the GeSHi input filter.'),
      'group' => t('GeSHi module'),
    );
  }

  /**
   * SimpleTest core method: code run before each and every test method.
   *
   * Optional. You only need this if you have setup tasks.
   */
  function setUp() {
    // Always call the setUp() function from the parent class.
    parent::setUp();

    // Make sure that Geshi filter module is enabled.
    $this->drupalModuleEnable('geshifilter');
    // Disable CAPTCHA module so users can post without trouble (just in case)
    $this->drupalModuleDisable('captcha');

    // Create a filter admin user
    $permissions = array(
      'administer filters',
      'access devel information',
    );
    $this->filter_admin_user = $this->drupalCreateUserRolePerm($permissions);
    // Create a normal user for page creation
    $permissions = array(
      'access devel information',
      'edit own page content',
      'create page content'
    );
    $this->normal_user = $this->drupalCreateUserRolePerm($permissions);

    // log in with filter admin user
    $this->drupalLoginUser($this->filter_admin_user);

    // add an input format with only geshi filter
    $edit = array(
      'name' => $this->randomName(10, 'inputformat_'),
      'filters[geshifilter/0]' => TRUE,
      'roles[2]' => TRUE,
    );
    $this->drupalPost('admin/settings/filters/add', $edit, t('Save configuration'));
    // store the format id of the created input format
    $this->input_format_id = db_result(db_query("SELECT format FROM {filter_formats} WHERE name = '%s'", $edit['name']));
    $this->assertTrue($this->input_format_id, t('Input format id (%s)'));

    // set some default GeSHi filter admin settings
    $this->drupalVariableSet('geshifilter_format_specific_options', FALSE);
    $this->drupalVariableSet('geshifilter_brackets', GESHIFILTER_BRACKETS_BOTH);
    $this->drupalVariableSet('geshifilter_default_line_numbering', GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE);

    // log out as filter admin
    $this->drupalGet(url('logout', array('absolute' => TRUE)));

    // log in as the normal user for adding pages
    $this->drupalLoginUser($this->normal_user);

    // include GeSHi filtering functions
    require_once(drupal_get_path('module', 'geshifilter') .'/geshifilter.pages.inc');

  }

  /**
   * SimpleTest core method: code run after each and every test method.
   *
   * Optional. You only need this if you have setup tasks.
   */
  function tearDown() {
    // log in as filter admin
    $this->drupalGet(url('logout', array('absolute' => TRUE)));
    $this->drupalLoginUser($this->filter_admin_user);

    // remove input format
    $this->drupalPost('admin/settings/filters/delete/'. $this->input_format_id, array(), t('Delete'));

    // Always call the tearDown() function from the parent class.
    parent::tearDown();
  }


  /**
   * helper function for testSpecialTags()
   */
  function _testSpecialTags($open_tag, $source_code, $close_tag, $lang) {
    // Create content.
    $edit = array(
      'title' => $this->randomName(32, 'pagetitle_'),
      'body' => $open_tag . $source_code . $close_tag,
      'format' => $this->input_format_id,
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));
    // check posted node
    $node = node_load(array('title' => $edit['title']));
    $this->assertTrue($node, 'Node found in database. %s');
    // check if highlighting succeeded
    $highlighted = geshifilter_geshi_process($source_code, $lang);
    $this->assertWantedRaw($highlighted,
      t('Source code in @open_tag...@close_tag should work', array(
        '@open_tag' => $open_tag, '@close_tag' => $close_tag
      )));
  }

  /**
   * Check if tags like [c++] and [c#] work
   */
  function testSpecialTags() {
    // enabled the tags
    $this->drupalVariableSet('geshifilter_language_enabled_cpp', TRUE);
    $this->drupalVariableSet('geshifilter_language_tags_cpp', 'c++');
    $this->drupalVariableSet('geshifilter_language_enabled_csharp', TRUE);
    $this->drupalVariableSet('geshifilter_language_tags_csharp', 'c#');
    // add nodes with source code
    $this->_testSpecialTags('<c++>', "//C++ source code\nfor (int i=0; i<10; ++i) {\n  fun(i);\n}", '</c++>', 'cpp');
    $this->_testSpecialTags('[c++]', "//C++ source code\nfor (int i=0; i<10; ++i) {\n  fun(i);\n}", '[/c++]', 'cpp');
    $this->_testSpecialTags('<c#>', "//C# source code\nfor (int i=0; i<10; ++i) {\n  fun(i);\n}", '</c#>', 'csharp');
    $this->_testSpecialTags('[c#]', "//C# source code\nfor (int i=0; i<10; ++i) {\n  fun(i);\n}", '[/c#]', 'csharp');
  }

}
