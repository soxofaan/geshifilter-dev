<?php
// $Id$

/**
 * @file
 * An input filter for syntax highlighting using the GeSHi library.
 */

/*
 * Constants for GeSHi versions.
 */
define('GESHI_VERSION_1_0_x', '1.0.x');
define('GESHI_VERSION_1_1_x',  '1.1.x');

define('GESHIFILTER_CSS_INLINE', 1);
define('GESHIFILTER_CSS_CLASSES', 2);

/**
 * Implementation of hook_help().
 */
function geshifilter_help($section) {
  $output = '';

  switch ($section) {
    case 'admin/settings/geshifilter':
    case 'admin/help#geshifilter':
      $output = '<p>'. t('The GeSHi filter does syntax highlighting using <a href="http://geshi.org/">GeSHi (Generic Syntax Highlighter)</a>.') .'</p>';
      $output .= '<p>'. t('This filter supports version 1.0.x and the developement version 1.1.x of GeSHi, but it is recommended to use version 1.0.x at the moment.') .'</p>';
      break;
  }

  return $output;
}

/**
 * Implementation of hook_menu().
 */
function geshifilter_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/geshifilter',
      'title' => t('GeSHi Filter'),
      'description' => t('Configure the GeSHi filter.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geshifilter_admin_general_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/general',
      'title' => t('General settings'),
      'description' => t('General GeSHi filter settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/filterconflicts',
      'title' => t('Filter conflicts'),
      'description' => t('Information on possible conflicts with other filters.'),
      'callback' => 'geshifilter_admin_filter_conflicts',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
    // language settings
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages',
      'title' => t('Per language settings'),
      'description' => t('Edit per language settings for syntax highlighting.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geshifilter_admin_per_language_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/all',
      'title' => t('All'),
      'weight' => 0,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/enabled',
      'title' => t('Enabled'),
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/disabled',
      'title' => t('Disabled'),
      'weight' => 4,
      'type' => MENU_LOCAL_TASK,
    );
  } else {
    // Since the filtered content is cached, it is not possible to know on which
    // pages the css file is actually needed. Thus it is included on all pages.
    drupal_add_css(drupal_get_path('module', 'geshifilter') .'/geshifilter.css');
  }
  return $items;
}

/**
 * Implementation of hook_filter_tips().
 */
function geshifilter_filter_tips($delta, $format, $long = false) {
  $default_tags = _geshifilter_whitespace_explode(geshifilter_tags($format));
  $languages = geshifilter_active_languages();
  $tag_to_lang = array();
  $special_tags = array();
  foreach($languages as $language) {
    $lang_tags = _geshifilter_whitespace_explode(geshifilter_language_tags($language, $format));
    foreach($lang_tags as $lang_tag) {
      if ($lang_tag) {
        $special_tags[] = $lang_tag;
        $tag_to_lang[$lang_tag] = $language;
      }
    }
  }
  $default_lang = variable_get('geshifilter_default_language', '');
  if (!$default_lang) {
    $default_lang = 'no highlighting';
  }
  if ($long) {
    $output = '<p>' . t('Code highlighting can be done with the following tags:') . '</p>';
    $items = array();
    foreach($default_tags as $tag) {
      $items[] = '&lt;'.$tag.'&gt; - ' . t('default codeblock or specify highlighting type with %param parameters', array('%param' => implode(', ', _geshifilter_whitespace_explode(geshifilter_attributes($format)))));
    }
    foreach($special_tags as $tag) {
      $items[] .= '&lt;'.$tag.'&gt; - ' . t('highlight %lang', array('%lang' => $tag_to_lang[$tag]));
    }
    $output .= theme('item_list', $items);
    $output .= '<p>' . t('Additional tips and options:') . '</p>';
    $items = array();
    $items[] = t('To highligh code as a block start the code on a newline after the code-tag, otherwise it will be highlighted inline.');
    $items[] = t('The available languages for the language attribute are: %langs.', array('%langs' => implode(', ', $languages)));
    $items[] = t('To enable linenumbers use %attributes as attribute and optionally specify the starting number with <em>="number"</em> or just <em>=number</em> after the attribute.', array('%attributes' => implode(', ', _geshifilter_whitespace_explode(geshifilter_linenumber_attributes()))));
    $output .= theme('item_list', $items);
    $output .= '<p>' . t('Examples:') . '</p>';
    $header = array(t('Language'), t('Inline'), t('Block'));
    $rows = array();
    foreach($default_tags as $tag) {
      if ($default_lang == 'no highlighting') {
        $rows[] = array(
          $default_lang,
          '&lt;'.$tag.'&gt;'.t('inline code without special highlighting').'&lt;/'.$tag.'&gt',
          '&lt;'.$tag.'&gt;<br/>'.t('block code without special highlighting').'<br/>&lt;/'.$tag.'&gt'
        );
      } else {
        $rows[] = array(
          $default_lang,
          '&lt;'.$tag.'&gt;'.t('inline code for %lang', array('%lang' => $default_lang)).'&lt;/'.$tag.'&gt',
          '&lt;'.$tag.'&gt;<br/>'.t('block code for %lang', array('%lang' => $default_lang)).'<br/>&lt;/'.$tag.'&gt'
        );
      }
    }
    foreach($special_tags as $tag) {
      $rows[] = array(
        $tag_to_lang[$tag],
        '&lt;'.$tag.'&gt;'.t('inline code for %lang', array('%lang' => $tag_to_lang[$tag])).'&lt;/'.$tag.'&gt',
        '&lt;'.$tag.'&gt;<br/>'.t('block code for %lang', array('%lang' => $tag_to_lang[$tag])).'<br/>&lt;/'.$tag.'&gt'
      );
    }
    $output .= theme('table', $header, $rows);
    return $output;
  } else {
    return t('You can highlight code with any of the following tags: %tags', array('%tags' => '<'.implode('>, <', array_merge($default_tags, $special_tags)).'>'));
  }
}

/**
 * Implementation of hook_filter().
 */
function geshifilter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array('GeSHi filter');

    case 'description':
      return t('Syntax highlighting using the <a href="http://geshi.org">GeSHi</a> engine');

    case 'process':
      return geshifilter_process($format, $text);

    case 'settings':
      return geshifilter_filter_settings($format);

    case 'no cache':
      return false;

    default:
      return $text;
  }
}

/**
 * Helper function for some settings form fields usable as general and specific settings
 */
function _geshifilter_tag_and_attribute_settings($format) {
  $form = array();
  $f = ($format === NULL) ? '' : "_$format";
  $form["geshifilter_tags$f"] = array(
    '#type' => 'textfield',
    '#title' => t('Syntax highlighting tags'),
    '#default_value' => geshifilter_tags($format),
    '#description' => t('Tags that should activate the GeSHi syntax highlighting. Specify a space-separated list of tagnames. Don\'t include &lt; and &gt; in the tagnames.')
  );
  $form["geshifilter_attributes$f"] = array(
    '#type' => 'textfield',
    '#title' => t('Language attributes'),
    '#default_value' => geshifilter_attributes($format),
    '#description' => t('Space separated list of attribute names for specifying the language syntax.')
  );
  $form["geshifilter_linenumber_attributes$f"] = array(
    '#type' => 'textfield',
    '#title' => t('Line numbers attributes'),
    '#default_value' => geshifilter_linenumber_attributes($format),
    '#description' => t('Space separated list of attribute names for enabling line numbering and specifying the number of the first line.')
  );
  return $form;
}

/**
 * Form (items) for filter settings.
 */
function geshifilter_filter_settings($format) {
  $form = array();
  $form['geshifilter'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi filter'),
    '#collapsible' => TRUE,
  );
  if (geshifilter_use_format_specific_options()) {
    // tags and attributes
    $form['geshifilter']['tags_and_attributes'] = _geshifilter_tag_and_attribute_settings($format);
    // per language tags
    $form['geshifilter']['per_language_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Per language tags'),
      '#collapsible' => TRUE,
      'table' => geshifilter_per_language_settings($format, 'enabled', FALSE, TRUE, FALSE),
    );
  } else {
    $form['geshifilter']['info'] = array(
      '#value' => '<p>'.t('The <a href="!geshi_admin_url">general settings</a> are used for the GeSHi filter . If you want specific settings per input format, you first have to enable this option in the <a href="!geshi_admin_url">general settings</a>.', array('!geshi_admin_url' => url('admin/settings/geshifilter'))).'</p>'
    );
  }
  return $form;
}

/**
 * function for generating a form table for per language settings
 */
function geshifilter_per_language_settings($format, $view, $add_checkbox, $add_tag_option, $add_theme_options) {
  $form = array(
    '#theme' => 'geshifilter_per_language_settings',
  );
  // store the format as value in the form (needed by theme_geshifilter_per_language_settings)
  $form['format'] = array(
    '#type' => 'value',
    '#value' => $format,
  );
  // table header
  $form['header'] = array(
    '#type' => 'value',
    '#value' => array(),
  );
  if ($add_checkbox) {
    $form['header']['#value'][] = t('Enabled');
  }
  if ($add_tag_option) {
    $form['header']['#value'][] = t('Tags');
  }
  if ($add_theme_options) {
    $form['header']['#value'][] = t('Theme');
  }
  // table body
  $form['languages'] = array();
  $languages = geshifilter_available_languages();
  foreach($languages as $language) {
    $enabled = variable_get("geshifilter_language_enabled_{$language}", TRUE);
    // skip items to hide
    if (($view == 'enabled' && !$enabled) || ($view == 'disabled' && $enabled)) {
      continue;
    }
    // build language row
    $form['languages'][$language] = array();
    // add enable/disable checkbox
    if ($add_checkbox) {
      $form['languages'][$language]["geshifilter_language_enabled_{$language}"] = array(
        '#type' => 'checkbox',
        '#default_value' => $enabled,
      );
    }
    // add a textfield for tags
    if ($add_tag_option) {
      $form['languages'][$language]["geshifilter_language_tags_{$language}_{$format}"] = array(
        '#type' => 'textfield',
        '#default_value' => geshifilter_language_tags($language, $format),
      );
    }
    // add the theme options (GeSHi 1.1.x only)
    if ($add_theme_options) {
      $themes = geshifilter_available_themes($language);
      if (count($themes) > 1) {
        $form['languages'][$language]["geshifilter_language_theme_{$language}"] = array(
          '#type' => 'select',
          '#default_value' => variable_get("geshifilter_language_theme_$language", 'default'),
          '#options' => $themes,
        );
      } else {
        $form['languages'][$language]["geshifilter_language_theme_{$language}"] = array(
          '#type' => 'markup',
          '#value' => 'default',
        );
      }
    }
  }
  return $form;
}

/**
 * theming function for the per language settings table
 */
function theme_geshifilter_per_language_settings($form) {
  $format = $form['format']['#value'];
  $version = geshifilter_version();
  $rows = array();
  foreach (element_children($form['languages']) as $language) {
    $row = array();
    $row[] = "$language";
    foreach (element_children($form['languages'][$language]) as $key) {
      $row[] = drupal_render($form['languages'][$language][$key]);
    }
    $rows[] = $row;
  }
  $header = array_merge(array(t('Language')), $form['header']['#value']);
  $output = theme('table', $header, $rows);
  return $output;
}

/**
 * Menu callback for admin settings
 */
function geshifilter_admin_general_settings() {
  $form = array();

  $form['geshi_library'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi library'),
  );
  $form['geshi_library']['geshifilter_geshi_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to GeSHi library'),
    '#default_value' => geshifilter_geshi_path(),
    '#description' => t('Specify the path to the GeSHi library directory. The specified directory can contain either the version 1.0.x (a file called <em>geshi.php</em> has to be in the directory) or the version 1.1.x (a file called <em>class.geshi.php</em> has to be in the directory).  After changing the path, it is necessary to save and refresh this settings page to see if GeSHi was successfully detected.')
  );
  $version = geshifilter_version();
  $form['geshi_library']['geshifilter_detected_version'] = array(
    '#value' => '<p'.($version ? '' : ' class="error"').'>'.t('Detected version: ').'<strong>'.($version ? $version : t('GeSHi not detected in specified path.')).'</strong></p>',
  );
  // format specific options
  $form['geshifilter_format_specific_options'] = array(
    '#type' => 'checkbox',
    '#title' => t('Seperate settings per input format'),
    '#default_value' => geshifilter_use_format_specific_options(),
    '#description' => t('Enable seperate configuration of the GeSHi filter for each <a href="!input_formats">input format</a>.', array('!input_formats' => url('admin/settings/filters'))),
  );
  // CSS mode
  $form['geshifilter_css_mode'] = array(
    '#type' => 'radios',
    '#title' => t('CSS mode for syntax highlighting'),
    '#default_value' => variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE),
    '#options' => array(
      GESHIFILTER_CSS_INLINE => t('Inline CSS style attributes.'),
      GESHIFILTER_CSS_CLASSES => t('CSS classes and external stylesheet.'),
    ),
  );
  // default language
  $languages = geshifilter_available_languages();
  $form['geshifilter']['geshifilter_default_language'] = array(
    '#type' => 'select',
    '#title' => t('Default language syntax'),
    '#default_value' => variable_get('geshifilter_default_language', ''),
    '#options' => array_merge(array('<no highlighting>'), $languages),
    '#description' => t('Select the default language syntax to use. This setting can be overwritten with a language attribute in the tag.')
  );
  // tag and attributes
  if (!geshifilter_use_format_specific_options()) {
    $form['geshifilter']['tags_and_attributes'] = _geshifilter_tag_and_attribute_settings($format);
  }
  return system_settings_form($form);
}


/**
 * Menu callback for per language settings
 */
function geshifilter_admin_per_language_settings($view = 'all') {
  $form = array();
  $add_checkbox = TRUE;
  $add_tag_option = (!geshifilter_use_format_specific_options());
  $add_theme_options = (geshifilter_version() == GESHI_VERSION_1_1_x);
  $form['language_settings'] = geshifilter_per_language_settings(NULL, $view, $add_checkbox, $add_tag_option, $add_theme_options);
  return system_settings_form($form);
}


/**
 * Menu callback for filter conflicts page
 */
function geshifilter_admin_filter_conflicts() {
  $alerts = array();
  // Check the order of the GeSHi filter with some other known filters
  $conflicting_after_filters = array('filter/0', 'pearwiki_filter/0');
  foreach (filter_formats() as $ifid => $input_format) {
    // Get the filters in this input format
    $filters = filter_list_format($ifid);
    // look if GeSHi is enabled in this input format
    if (isset($filters['geshifilter/0'])) {
      $geshifilter = $filters['geshifilter/0'];
      // look if possibly conflicting filters are also present in input format
      foreach($conflicting_after_filters as $key) {
        if (array_key_exists($key, $filters)) {
          $cfilter = $filters[$key];
          if ($cfilter->weight >= $geshifilter->weight) {
            $alerts[] = array(
              l(t($input_format->name), "/admin/settings/filters/$ifid"),
              t('%geshifilter should come after %cfilter', array('%cfilter' => $cfilter->name, '%geshifilter' => $geshifilter->name)),
              implode(', ', array(
                l(t('rearrange filters'), "/admin/settings/filters/$ifid/order", array(), drupal_get_destination()),
                l(t('disable one of these filters'), "/admin/settings/filters/$ifid", array(), drupal_get_destination()),
              ))
            );
          }
        }
      }
    }
  }
  // show alerts
  if ($alerts) {
    $output = '<p>' . t('The following known conflicts were detected.') . '</p>';
    $header = array(t('Input format'), t('Conflict'), t('Possible solutions'));
    $output .= theme('table', $header, $alerts);
  }
  else {
    $output = '<p>' . t('No known conflicts were detected.') . '</p>';
  }
  return $output;
}

/**
 * Helper function for splitting a string on white spaces.
 * Using explode(' ', $string) is not enough because it returns empty elements
 * if $string contains consecutive spaces.
 */
function _geshifilter_whitespace_explode($string) {
  return preg_split('/\s+/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

// General settings
function geshifilter_use_format_specific_options() {
  return variable_get('geshifilter_format_specific_options', FALSE);
}
// Format specific settings
function geshifilter_geshi_path() {
  return variable_get('geshifilter_geshi_path', getcwd().'/'.drupal_get_path('module', 'geshifilter').'/geshi');
}
function geshifilter_tags($format = 0) {
  if (!geshifilter_use_format_specific_options() || $format==0)
    return variable_get('geshifilter_tags_0', 'code');
  return variable_get('geshifilter_tags_'.$format, geshifilter_tags());
}
function geshifilter_attributes($format = 0) {
  if (!geshifilter_use_format_specific_options() || $format==0)
    return variable_get('geshifilter_attributes_0', 'type lang');
  return variable_get('geshifilter_attributes_'.$format, geshifilter_attributes());
}
function geshifilter_linenumber_attributes($format = 0) {
  if (!geshifilter_use_format_specific_options() || $format==0)
    return variable_get('geshifilter_linenumber_attributes_0', 'start');
  return variable_get('geshifilter_linenumber_attributes_'.$format, geshifilter_linenumber_attributes());
}
function geshifilter_language_tags($language, $format = 0) {
  if (!geshifilter_use_format_specific_options() || $format==0)
    return variable_get('geshifilter_language_tags_'.$language.'_0', '');
  return variable_get('geshifilter_language_tags_'.$language.'_'.$format, geshifilter_language_tags($language));
}

/**
 * List of available languages.
 */
function geshifilter_available_languages() {
  $available_languages = array();
  $geshi_dirname = realpath(geshifilter_geshi_path());
  if (is_dir($geshi_dirname)) {
    switch (geshifilter_version()) {
      case GESHI_VERSION_1_0_x:
        $handle = opendir($geshi_dirname.'/geshi/');
        while ($file = readdir($handle)) {
          $lang = basename($file, '.php');
          if ($lang != $file) {
            $available_languages[$lang] = $lang;
          }
        }
        break;
      case GESHI_VERSION_1_1_x:
        $handle = opendir($geshi_dirname.'/geshi/languages/');
        while ($file = readdir($handle)) {
          $lang_dirname = $geshi_dirname.'/geshi/languages/'.$file;
          if ($file != '.' && $file != '..' && is_dir($lang_dirname) && is_file($lang_dirname.'/'.$file.'.php')) {
            $available_languages[$file] = $file;
          }
        }
        closedir($handle);
        break;
    }
    ksort($available_languages);
  }
  return $available_languages;
}

/**
 * List of languages which are activated.
 */
function geshifilter_active_languages() {
  $result = array();
  $languages = geshifilter_available_languages();
  foreach($languages as $key => $language) {
    if (variable_get("geshifilter_language_enabled_{$language}", TRUE)) {
      $result[$key] = $language;
    }
  }
  return $result;
}

/**
 * List of available themes for the given language.
 */
function geshifilter_available_themes($language) {
  static $themes_loaded = false;
  static $themes = array();
  if (!$themes_loaded) {
    $themes_loaded = true;

    $themes_dir = realpath(geshifilter_geshi_path()).'/geshi/themes';
    if (is_dir($themes_dir)) {
      $handle = opendir($themes_dir);
      while ($file = readdir($handle)) {
        if ($file != '.' && $file != '..' && is_dir($themes_dir.'/'.$file)) {
          if (is_file($themes_dir.'/'.$file.'/themeinfo.php')) {
            $human_name = false;
            $languages = array();
            @include_once($themes_dir.'/'.$file.'/themeinfo.php');
            if ($human_name) {
              $themes[$file] = array(
                'human_name' => $human_name,
                'languages' => array_keys($languages)
              );
            }
          }
        }
      }
    }
  }
  $result = array();
  $result['default'] = 'Default';
  foreach($themes as $theme_name => $theme) {
    if ($theme_name != 'default' && in_array($language, $theme['languages'])) {
      $result[$theme_name] = $theme['human_name'];
    }
  }
  return $result;
}

/**
 * Version of GeSHi or NULL if GeSHi wasn't found.
 */
function geshifilter_version() {
  $result = NULL;
  $path = realpath(geshifilter_geshi_path());
  if (is_dir($path)) {
    if (is_file($path.'/geshi.php')) {
      $result = GESHI_VERSION_1_0_x;
    } elseif (is_file($path.'/class.geshi.php')) {
      $result = GESHI_VERSION_1_1_x;
    }
  }
  return $result;
}

/**
 * Callback for processing input text.
 */
function geshifilter_process($format, $text) {
  $version = geshifilter_version();
  if (!$version) {
    drupal_set_message(t('GeSHi installation not found. See <a href="!url">configuration of the filter</a>.', array('!url' => url('admin/settings/filters/'.$format.'/configure'))), 'error');
    return $text;
  }
  $default_tags = _geshifilter_whitespace_explode(geshifilter_tags($format));
  $special_tags = array();
  $tag_to_lang = array();
  $languages = geshifilter_active_languages();
  foreach($languages as $language) {
    $lang_tags = _geshifilter_whitespace_explode(geshifilter_language_tags($language, $format));
    foreach($lang_tags as $lang_tag) {
      if ($lang_tag) {
        $special_tags[] = $lang_tag;
        $tag_to_lang[$lang_tag] = $language;
      }
    }
  }

  $tags = array_merge($default_tags, $special_tags);
  $tags_string = implode('|', $tags);
  $lang_attributes = _geshifilter_whitespace_explode(geshifilter_attributes($format));
  $linenumber_attributes = _geshifilter_whitespace_explode(geshifilter_linenumber_attributes($format));
  $attributes_string = implode('|', array_merge($lang_attributes, $linenumber_attributes));

  // todo: maybe change to preg_replace_callback, should be faster
  if (preg_match_all('#<('.$tags_string.')([^>]*)>(.*?)</\1\s*>#s', $text, $match)) {
    // $match[0][xx] .... fully matched string <tag type="language">...</tag>
    // $match[1][xx] .... tagname
    // $match[2][xx] .... full params string type="language"...
    // $match[3][xx] .... tag content
    foreach($match[3] as $key => $value) {
      // default values
      $lang = variable_get('geshifilter_default_language', '');
      if (isset($tag_to_lang[$match[1][$key]])) {
        $lang = $tag_to_lang[$match[1][$key]];
      }
      $linenumbers_start = 0;

      preg_match_all('#('.$attributes_string.')="?([^\s"]*)"?#', $match[2][$key], $param);
      // $param[0][xx] .... fully matched string type="language"
      // $param[1][xx] .... param name
      // $param[2][xx] .... param value
      foreach($param[1] as $p_key => $p_name) {
        $p_value = $param[2][$p_key];
        if (in_array($p_name, $lang_attributes)) {
          if (in_array($p_value, $languages)) {
            $lang = $p_value;
          }
        } elseif (in_array($p_name, $linenumber_attributes)) {
          if ($p_value) {
            $linenumbers_start = $p_value;
          } else {
            $linenumbers_start = 1;
          }
        }
      }

      // it's a seperate block if after the tag a newline starts or there is any newline at all
      $is_block = ($value[0] == "\n") || (strpos($value, "\n") > 0);

      $matched = $value;

      if ($lang) {

        // geshi will reencode these
        $matched = decode_entities(trim($matched));

        // undo nl and p formatting
        $matched = preg_replace("@<br />@", "", $matched);
        $matched = preg_replace("@<br/>@", "", $matched);
        $matched = preg_replace("@<p>|</p>@", "", $matched);

        $matched = trim($matched);

        switch($version) {
          case GESHI_VERSION_1_0_x:
            $matched = geshifilter_process_zero($format, $matched, $lang, $is_block, $linenumbers_start);
            break;
          case GESHI_VERSION_1_1_x:
            $matched = geshifilter_process_two($format, $matched, $lang, $is_block);
            break;
          default:
            $matched = $value;
            break;
        }
      } else {
        // undo nl and p formatting
        $matched = preg_replace("@<br />@", "", $matched);
        $matched = preg_replace("@<p>|</p>@", "", $matched);

        $matched = trim($matched);

        if ($is_block) {
          $matched = '<pre class="geshifilter">'.$matched.'</pre>';
        } else {
          $matched = '<code class="geshifilter">'.$matched.'</code>';
        }
      }

      $text = str_replace($match[0][$key], $matched, $text);
    }
  }
  return $text;
}

/**
 * Highlight using GeSHi 1.0.x
 */
function geshifilter_process_zero($format, $text, $lang, $is_block = true, $linenumbers_start = 0) {
  $geshifile = realpath(geshifilter_geshi_path()).'/geshi.php';
  if (!$geshifile) {
    drupal_set_message(t('GeSHi file <em>geshi.php</em> not found in directory %dir', array('%dir'=>geshifilter_geshi_path())), 'error');
    return $text;
  }

  if (!class_exists('GeSHi')) {
    @include_once($geshifile);
  }
  if (!class_exists('GeSHi')) {
    drupal_set_message(t('Unable to load GeSHi class. Check your installation and the <a href="!url">filter settings</a>', array('!url', url('admin/settings/filters/'.$format.'/configure'))), 'error');
    return $text;
  }

  $geshi = new GeSHi($text, $lang, realpath(geshifilter_geshi_path()).'/geshi');

  if (variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE) == GESHIFILTER_CSS_CLASSES) {
    $geshi->enable_classes(TRUE);
  }

  // setup geshi
  if ($is_block) {
    $geshi->set_header_type(GESHI_HEADER_DIV);
    if ($linenumbers_start) {
      $geshi->set_header_type(GESHI_HEADER_DIV);
      $geshi->enable_line_numbers(GESHI_NORMAL_LINE_NUMBERS);
      $geshi->start_line_numbers_at($linenumbers_start);
    }

    $geshi->set_overall_class('geshifilter '.$lang);
    return $geshi->parse_code();
  } else {
    $geshi->set_header_type(GESHI_HEADER_NONE);
    return '<code class="geshifilter '.$lang.'">' . $geshi->parse_code() . '</code>';
  }
}

/**
 * Highlight using GeSHi 1.1.x
 */
function geshifilter_process_two($format, $text, $lang, $is_block) {
  $geshifile = realpath(geshifilter_geshi_path()).'/class.geshi.php';
  if (!$geshifile) {
    drupal_set_message(t('GeSHi file <em>geshi.php</em> not found in directory %dir', array('%dir'=>geshifilter_geshi_path())), 'error');
    return $text;
  }

  if (!class_exists('GeSHi')) {
    @include_once($geshifile);
  }
  if (!class_exists('GeSHi')) {
    drupal_set_message(t('Unable to load GeSHi class. Check your installation and the <a href="!url">filter settings</a>', array('!url', url('admin/settings/filters/'.$format.'/configure'))), 'error');
    return $text;
  }

  $geshi = new GeSHi($text, $lang);
//  $geshi->setRenderer(new GeshiRendererHTMLCSS);
  return $geshi->parseCode();
}
