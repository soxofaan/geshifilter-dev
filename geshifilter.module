<?php
// $Id: geshifilter.module,v 1.18.2.53 2008/02/22 09:09:32 soxofaan Exp $

/**
 * @file
 * An input filter for syntax highlighting using the GeSHi library.
 */

define('GESHIFILTER_DEFAULT_PLAINTEXT', 'GESHIFILTER_DEFAULT_PLAINTEXT');
define('GESHIFILTER_DEFAULT_DONOTHING', 'GESHIFILTER_DEFAULT_DONOTHING');

define('GESHIFILTER_CSS_INLINE', 1);
define('GESHIFILTER_CSS_CLASSES', 2);

define('GESHIFILTER_ATTRIBUTES_LANGUAGE', 'type lang language');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING', 'linenumbers');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START', 'start');
define('GESHIFILTER_ATTRIBUTE_FANCY_N', 'fancy');

define('GESHIFILTER_BRACKETS_ANGLE', 1);
define('GESHIFILTER_BRACKETS_SQUARE', 2);
define('GESHIFILTER_BRACKETS_BOTH', 3);

define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE', 0);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL', 1);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY5', 5);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY10', 10);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY20', 20);

/**
 * Implementation of hook_help().
 */
function geshifilter_help($section) {
  switch ($section) {
    case 'admin/settings/geshifilter':
    case 'admin/help#geshifilter':
      $output = '<p>'. t('The GeSHi filter module provides a filter for syntax highlighting of inline source code or blocks of source code based on the PHP library !GeSHi.', array('!GeSHi' => l('GeSHi (Generic Syntax Highlighter)', 'http://qbnz.com/highlighter/'))) .'</p>';
      if ($section == 'admin/help#geshifilter') {
        $output .= '<p>'. t('The GeSHi filter module for Drupal requires the GeSHi library (version 1.0.x) to work. The GeSHi filter is actually just a Drupal wrapper module around the GeSHi library. Because of <a href="!repositorypolicies">drupal.org repository policies</a> however, the GeSHi library is not included in the GeSHi filter package, so you should <a href="!geshi">download</a> and install the GeSHi library separately.', array(
          '!repositorypolicies' => url('http://drupal.org/node/66113'),
          '!geshi' => url('http://qbnz.com/highlighter/'),
        )) .'</p>';
        $output .= t('<p>Quick overview of how to set up and use the GeSHi filter:</p><ul><li>Install the GeSHi library and specify its path on the <a href="!geshifilter_settings">GeSHi filter administration page</a>.</li><li>Configure the <a href="!geshifilter_settings">general GeSHi filter settings</a>.</li><li><a href="!geshifilter_languages">Enable the relevant languages</a> for your site.</li><li>Enable the GeSHi filter in the desired !inputformats.</li><li>Check for !filterconflicts and resolve them.</li><li>Use the input format during content submission as described in the !filtertips.</li></ul>', array(
          '!geshifilter_settings' => url('admin/settings/geshifilter'),
          '!geshifilter_languages' => url('admin/settings/geshifilter/languages/all'),
          '!inputformats' => l(t('input formats'), 'admin/settings/filters'),
          '!filterconflicts' => l(t('filter conflicts'), 'admin/settings/geshifilter/filterconflicts'),
          '!filtertips' => l(t('filter tips'), 'filter/tips'),
        ));
      }
      return $output;
      break;
    case 'admin/settings/geshifilter/languages':
    case 'admin/settings/geshifilter/languages/enabled':
    case 'admin/settings/geshifilter/languages/all':
    case 'admin/settings/geshifilter/languages/disabled':
      $output = '<p>'. t('Here you can enable/disable the desired languages to use. It is suggested to disable languages that are not relevant for you site not only to avoid unnecessary cluttering of the GeSHi filter configuration pages and the !filtertips, but also to make the GeSHi filter processing lighter.', array('!filtertips' => l(t('filter tips'), 'filter/tips'))) .'</p>';
      if (!geshifilter_use_format_specific_options()) {
        $output .= '<p>'. t('You can also define the language specific tags here.') .'</p>';
      }
      return $output;
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function geshifilter_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/geshifilter',
      'title' => t('GeSHi Filter'),
      'description' => t('Configure the GeSHi filter.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geshifilter_admin_general_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/general',
      'title' => t('General settings'),
      'description' => t('General GeSHi filter settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/filterconflicts',
      'title' => t('Filter conflicts'),
      'description' => t('Information on possible conflicts with other filters.'),
      'callback' => 'geshifilter_admin_filter_conflicts',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
    // language settings
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages',
      'title' => t('Languages'),
      'description' => t('Enable the desired languages and configure their settings.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geshifilter_admin_per_language_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/enabled',
      'title' => t('Enabled'),
      'description' => t('Show the enabled languages'),
      'weight' => 3,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/all',
      'title' => t('All'),
      'description' => t('Show all the available languages'),
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/disabled',
      'title' => t('Disabled'),
      'description' => t('Show the disabled languages'),
      'weight' => 6,
      'type' => MENU_LOCAL_TASK,
    );
    // clear available languages cache
    $items[] = array(
      'path' => 'geshifilter/clearavailablelanguagescache',
      'title' => t('Clear available languages cache'),
      'callback' => 'geshifilter_clear_available_languages_cache',
      'type' => MENU_CALLBACK,
      'access' => user_access('administer site configuration'),
    );
  }
  else {
    // Since the filtered content is cached, it is not possible to know on which
    // pages the css file is actually needed. Thus it is included on all pages.
    if (_geshifilter_css_mode() == GESHIFILTER_CSS_CLASSES) {
      if ($stylesheet_file = variable_get('geshifilter_languages_css', NULL)) {
        drupal_add_css($stylesheet_file);
      }
    }
    drupal_add_css(drupal_get_path('module', 'geshifilter') .'/geshifilter.css');
  }
  return $items;
}

/**
 * Implementation of hook_filter_tips().
 */
function geshifilter_filter_tips($delta, $format, $long = false) {
  require_once('geshifilter.filtertips.inc');
  return _geshifilter_filter_tips($delta, $format, $long);
}

/**
 * Implementation of hook_filter().
 */
function geshifilter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array('GeSHi filter');

    case 'description':
      return t('Enables syntax highlighting of inline/block source code using the GeSHi engine');

    case 'prepare':
      require_once('geshifilter.pages.inc');
      return _geshifilter_prepare($format, $text);

    case 'process':
      require_once('geshifilter.pages.inc');
      return _geshifilter_process($format, $text);

    case 'settings':
      return _geshifilter_filter_settings($format);

    case 'no cache':
      return false;

    default:
      return $text;
  }
}

function _geshifilter_get_geshi_dir() {
  return variable_get('geshifilter_geshi_dir', drupal_get_path('module', 'geshifilter') .'/geshi');
}

/**
 * Helper function for loading/checking the GeSHi library v 1.0.x (if not already)
 * Returns an array with keys 'success', 'loaded' and 'message'
 */
function _geshifilter_check_geshi_library($use_cache=TRUE, $geshi_dir=NULL, $load_when_found=TRUE) {
  static $geshi_library_cache = NULL;
  if ($use_cache && $geshi_library_cache !== NULL) {
    // get from cache
    $geshi_library = $geshi_library_cache;
  }
  else {
    // initialisation
    $geshi_library = array('success' => NULL, 'loaded' => FALSE, 'message' => NULL);
    // no cache
    if (!$geshi_dir) {
      $geshi_dir = _geshifilter_get_geshi_dir();
    }
    if (!is_dir($geshi_dir)) {
      $geshi_library['success'] = FALSE;
      $geshi_library['message'] = t('GeSHi library error: %dir is not a directory.', array('%dir' => $geshi_dir));
    }
    elseif (is_file($geshi_dir .'/geshi.php')) {
      // GeSHi 1.0.x found (probably, we can only be sure by loading it)
      $geshi_library['success'] = TRUE;
      if ($load_when_found) {
        require_once($geshi_dir .'/geshi.php');
        // check version
        $geshi_library_version = explode('.', GESHI_VERSION);
        if (!($geshi_library_version[0] == '1' &&  $geshi_library_version[1] == '0')) {
          $geshi_library['success'] = FALSE;
          $geshi_library['loaded'] = FALSE;
          $geshi_library['message'] = t('GeSHi library error: The detected version of GeSHi library (%version) is not supported. A version from the 1.0.x branch is required.', array('%version' => GESHI_VERSION));
        }
        else {
          $geshi_library['loaded'] = TRUE;
        }
      }
    }
    else {
      $geshi_library['success'] = FALSE;
      $geshi_library['message'] = t('GeSHi library error: Could not find a known version of the GeSHi library at %dir.' , array('%dir' => $geshi_dir));
    }
    // store in cache if needed
    if ($use_cache) {
      $geshi_library_cache = $geshi_library;
    }
  }
  return $geshi_library;
}

/**
 * Helper function for some settings form fields usable as general and specific settings
 */
function _geshifilter_general_highlight_tags_settings($format=NULL) {
  $form = array();
  $f = ($format === NULL) ? '' : "_$format";
  // generic tags
  $form["geshifilter_tags$f"] = array(
    '#type' => 'textfield',
    '#title' => t('Generic syntax highlighting tags'),
    '#default_value' => geshifilter_tags($format),
    '#description' => t('Tags that should activate the GeSHi syntax highlighting. Specify a space-separated list of tagnames.'),
  );
  // tag style
  $form["geshifilter_brackets$f"] = array(
    '#type' => 'select',
    '#title' => t('Tag style'),
    '#options' => array(
      GESHIFILTER_BRACKETS_ANGLE => '<foo>',
      GESHIFILTER_BRACKETS_SQUARE => '[foo]',
      GESHIFILTER_BRACKETS_BOTH => t('!angle or !square', array('!angle' => '<foo>', '!square' => '[foo]')),
    ),
    '#default_value' => _geshifilter_brackets($format),
    '#description' => t('Select which brackets should be used for the source code container tags.'),
  );
  // PHP specific delimiters
  $form['geshifilter']["geshifilter_enable_php_delimiters$f"] = array(
    '#type' => 'checkbox',
    '#title' => t('Apply syntax highlighting to &lt;?php ... ?&gt; style PHP source code blocks.'),
    '#description' => t('When enabled, PHP source code enclosed in &lt;?php...?&gt or &lt;%...%&gt; will also be processed.'),
    '#default_value' => _geshifilter_php_delimeters($format),
  );
  return $form;
}

/**
 * Form (items) for filter settings.
 */
function _geshifilter_filter_settings($format) {
  $form = array();
  $form['geshifilter'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi filter'),
    '#collapsible' => TRUE,
  );
  if (geshifilter_use_format_specific_options()) {
    // tags and attributes
    $form['geshifilter']['general_tags'] = _geshifilter_general_highlight_tags_settings($format);
    // per language tags
    $form['geshifilter']['per_language_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Per language tags'),
      '#collapsible' => TRUE,
      'table' => geshifilter_per_language_settings($format, 'enabled', FALSE, TRUE),
    );
  }
  else {
    $form['geshifilter']['info'] = array(
      '#value' => '<p>'. t('GeSHi filter is configured to use global tag settings. For separate settings per input format, enable this option in the <a href="!geshi_admin_url">general GeSHi filter settings</a>.', array('!geshi_admin_url' => url('admin/settings/geshifilter'))) .'</p>'
    );
  }
  return $form;
}

/**
 * function for generating a form table for per language settings
 */
function geshifilter_per_language_settings($format, $view, $add_checkbox, $add_tag_option) {
  $form = array(
    '#theme' => 'geshifilter_per_language_settings',
  );
  // table header
  $form['header'] = array(
    '#type' => 'value',
    '#value' => array(),
  );
  $form['header']['#value'][] = t('Language');
  $form['header']['#value'][] = t('Language code');
  if ($add_tag_option) {
    $form['header']['#value'][] = t('Tags');
  }
  // table body
  $form['languages'] = array();
  $languages = _geshifilter_get_available_languages();
  foreach ($languages as $language => $language_data) {
    $enabled = variable_get("geshifilter_language_enabled_{$language}", TRUE);
    // skip items to hide
    if (($view == 'enabled' && !$enabled) || ($view == 'disabled' && $enabled)) {
      continue;
    }
    // build language row
    $form['languages'][$language] = array();
    // add enable/disable checkbox
    if ($add_checkbox) {
      $form['languages'][$language]["geshifilter_language_enabled_{$language}"] = array(
        '#type' => 'checkbox',
        '#default_value' => $enabled,
        '#title' => $language_data['fullname'],
      );
    }
    else {
      $form['languages'][$language]['fullname'] = array(
        '#type' => 'markup',
        '#value' => $language_data['fullname'],
      );
    }
    // language code
    $form['languages'][$language]['name'] = array(
      '#type' => 'markup',
      '#value' => $language,
    );
    // add a textfield for tags
    if ($add_tag_option) {
      $f = ($format === NULL) ? '' : "_$format";
      $form['languages'][$language]["geshifilter_language_tags_{$language}{$f}"] = array(
        '#type' => 'textfield',
        '#default_value' => geshifilter_language_tags($language, $format),
        '#size' => 20,
      );
    }
  }
  return $form;
}

/**
 * theming function for the per language settings table
 */
function theme_geshifilter_per_language_settings($form) {
  // build table body
  $rows = array();
  foreach (element_children($form['languages']) as $language) {
    $row = array();
    foreach (element_children($form['languages'][$language]) as $key) {
      $row[] = drupal_render($form['languages'][$language][$key]);
    }
    $rows[] = $row;
  }
  // build table header
  $header = array();
  foreach ($form['header']['#value'] as $cell) {
    if ($cell == t('Enabled')) {
      // add JavaScript 'select all/select none' stuff
      $header[] = array('data' => $cell) + theme('table_select_header_cell');
    }
    else {
      $header[] = $cell;
    }
  }
  // return themed table
  return theme('table', $header, $rows);
}

/**
 * Menu callback for admin settings
 */
function geshifilter_admin_general_settings() {
  $form = array();
  // try to load GeSHi library and get version if successful
  $geshi_library = _geshifilter_check_geshi_library();
  // GeSHi library settings
  $form['geshifilter_library'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi library'),
    '#description' => t('The GeSHi filter requires the GeSHi library. You need to <a href="!geshi">download</a> and install it seperately.',
      array('!geshi' => url('http://qbnz.com/highlighter/'))),
    '#collapsible' => TRUE,
    '#collapsed' => $geshi_library['success'],
  );
  $form['geshifilter_library']['geshifilter_geshi_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to GeSHi library'),
    '#default_value' => _geshifilter_get_geshi_dir(),
    '#description' => t('Specify the path to the GeSHi library directory (which contains a file called <em>geshi.php</em>). After changing the path, it is necessary to save and refresh this settings page to see if GeSHi was successfully detected.')
  );
  if ($geshi_library['loaded']) {
    // show detected version
    $form['geshifilter_library']['geshifilter_detected_version'] = array(
      '#type' => 'item',
      '#value' => t('Detected version: %version', array('%version' => GESHI_VERSION)), // GESHI_VERSION is defined in GeSHi library
    );
  }
  else {
    // save error condition for pre render phase
    $form['geshifilter_geshi_library_error'] = array(
      '#type' => 'value',
      '#value' => $geshi_library['message'],
    );
    $form['#pre_render']['geshifilter'] = 'geshifilter_admin_general_settings_pre_render';
  }

  // GeSHi filter tags and delimiters options
  $form['geshifilter_tag_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi filter tags and delimiters'),
    '#collapsible' => TRUE,
  );
  // usage of format specific option
  $form['geshifilter_tag_options']['geshifilter_format_specific_options'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use input format specific tag settings.'),
    '#default_value' => geshifilter_use_format_specific_options(),
    '#description' => t('Enable seperate tag settings of the GeSHi filter for each <a href="!input_formats">input format</a> instead of global tag settings.', array('!input_formats' => url('admin/settings/filters'))),
  );
  // generic tags
  if (!geshifilter_use_format_specific_options()) {
    $form['geshifilter_tag_options']['geshifilter_general_tags'] = _geshifilter_general_highlight_tags_settings();
  }

  // GeSHi filter highlighting options
  $form['geshifilter_highlighting_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Syntax highlighting options'),
    '#collapsible' => TRUE,
  );
  // default language
  $languages = _geshifilter_get_enabled_languages();
  $form['geshifilter_highlighting_options']['geshifilter_default_highlighting'] = array(
    '#type' => 'select',
    '#title' => t('Default highlighting mode'),
    '#default_value' => variable_get('geshifilter_default_highlighting', GESHIFILTER_DEFAULT_PLAINTEXT),
    '#options' => array(
      t('No highlighting') => array(
        GESHIFILTER_DEFAULT_DONOTHING => t('Do nothing'),
        GESHIFILTER_DEFAULT_PLAINTEXT => t('As plain text'),
        ),
      t('Languages') => $languages,
    ),
    '#description' => t('Select the default highlighting mode to use when no language is defined with a language attribute in the tag.')
  );
  // Default line numbering scheme
  $form['geshifilter_highlighting_options']['geshifilter_default_line_numbering'] = array(
    '#type' => 'select',
    '#title' => t('Default line numbering'),
    '#default_value' => variable_get('geshifilter_default_line_numbering', GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE),
    '#options' => array(
      GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE => t('no line numbers'),
      GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL => t('normal line numbers'),
      GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY5 => t('fancy line numbers (every @n lines)', array('@n' => GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY5)),
      GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY10 => t('fancy line numbers (every @n lines)', array('@n' => GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY10)),
      GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY20 => t('fancy line numbers (every @n lines)', array('@n' => GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY20)),
    ),
    '#description' => t('Select the default line numbering scheme: no line numbers, normal line numbers or fancy line numbers. With fancy line numbers every n<sup>th</sup> line number is highlighted. (GeSHi documentation: !link).',
      array('!link' => l('Line numbers', 'http://qbnz.com/highlighter/geshi-doc.html#line-numbers'))),
  );
  // highlight_string usage option
  $form['geshifilter_highlighting_options']['geshifilter_use_highlight_string_for_php'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use built-in PHP function <code>highlight_string()</code> for PHP source code.'),
    '#description' => t('When enabled, PHP source code will be syntax highlighted with the built-in PHP function <code>!highlight_string</code> instead of with the GeSHi library. GeSHi features like for example line numbering and usage of an external CSS stylesheet are not available.', array('!highlight_string' => l('highlight_string()', 'http://php.net/manual/en/function.highlight-string.php'))),
    '#default_value' => variable_get('geshifilter_use_highlight_string_for_php', FALSE),
  );
  // Option to disable Keyword URL's
  $form['geshifilter_highlighting_options']['geshifilter_enable_keyword_urls'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable GeSHi keyword URLs'),
    '#description' => t('For some languages GeSHi can link language keywords (e.g. standard library functions) to their online documentation. (GeSHi documentation: !link)',
      array('!link' => l('Keyword URLs', 'http://qbnz.com/highlighter/geshi-doc.html#keyword-urls'))),
    '#default_value' => variable_get('geshifilter_enable_keyword_urls', TRUE),
  );

  // Styling, layout and CSS
  $form['geshifilter_styling'] = array(
    '#type' => 'fieldset',
    '#title' => t('Styling, layout and CSS'),
    '#collapsible' => TRUE,
  );
  // CSS mode: CSS classes + external stylesheet is only possible with public downloads in a writable files directory
  $directory = file_directory_path();
  $external_css_possible = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);
  $form['geshifilter_styling']['geshifilter_css_mode'] = array(
    '#type' => 'radios',
    '#title' => t('CSS mode for syntax highlighting'),
    '#description' => t('Inline CSS is easier to set up, does not depend on an external style sheets and is consequently more robust to copy/paste operations like content aggregation. However, usage of CSS classes and an external stylesheet (requires the public <a href="!filesystem">download method</a>) is however generally considered to be the better way of styling and requires much less HTML code and bandwith. (GeSHi documentation: !link).',
      array(
        '!link' => l('Using CSS Classes', 'http://qbnz.com/highlighter/geshi-doc.html#using-css-classes'),
        '!filesystem' => url('admin/settings/file-system'),
      )),
    '#disabled' => !$external_css_possible,
    '#default_value' => $external_css_possible ? intval(variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE)) : GESHIFILTER_CSS_INLINE,
    '#options' => array(
      GESHIFILTER_CSS_INLINE => t('Inline CSS style attributes.'),
      GESHIFILTER_CSS_CLASSES => t('CSS classes and external CSS style sheet.'),
    ),
  );
  // Code container
  $form['geshifilter_styling']['geshifilter_code_container'] = array(
    '#type' => 'radios',
    '#title' => t('Code container'),
    '#description' => t('Define the container element to use for code blocks. (GeSHi documentation: !link).',
      array('!link' => l('The Code Container', 'http://qbnz.com/highlighter/geshi-doc.html#the-code-container'))
    ),
    '#options' => array(
      GESHI_HEADER_PRE => t('Use @cnt container (efficient whitespace coding, no automatic line wrapping)', array('@cnt' => '<pre>')),
      GESHI_HEADER_DIV => t('Use @cnt container (enables automatic line wrapping)', array('@cnt' => '<div>')),
      GESHI_HEADER_NONE => t('Use no container'),
    ),
    '#default_value' => variable_get('geshifilter_code_container', GESHI_HEADER_PRE),
  );
  return system_settings_form($form);
}

/**
 * Pre render function for admin settings
 */
function geshifilter_admin_general_settings_pre_render($form_id, $form) {
  // warn if GeSHi library is not found
  if ($form_id == 'geshifilter_admin_general_settings') {
    if (isset($form['geshifilter_geshi_library_error'])) {
      form_set_error('geshifilter_geshi_dir', $form['geshifilter_geshi_library_error']['#value']);
    }
  }
}

/**
 * Validation function for admin settings
 */
function geshifilter_admin_general_settings_validate($form_id, $form_values) {
  if ($form_id == 'geshifilter_admin_general_settings') {
    // try to load GeSHi library from given dir
    $geshi_library = _geshifilter_check_geshi_library(FALSE, $form_values['geshifilter_geshi_dir'], FALSE);
    if (!$geshi_library['success']) {
      form_set_error('geshifilter_geshi_dir', $geshi_library['message']);
    }
  }
}

/**
 * Submit function for admin settings
 */
function geshifilter_admin_general_settings_submit($form_id, $form_values) {
  // normal system_settings_form processing
  system_settings_form_submit($form_id, $form_values);
  // regenerate language_css
  if (_geshifilter_css_mode() == GESHIFILTER_CSS_CLASSES) {
    _geshifilter_generate_languages_css();
  }
  _geshifilter_clear_filter_cache();
}

/**
 * Menu callback for per language settings
 */
function geshifilter_admin_per_language_settings($view = 'enabled') {
  $form = array();
  // check if GeSHi library is available
  $geshi_library = _geshifilter_check_geshi_library();
  if (!$geshi_library['success']) {
    drupal_set_message($geshi_library['message'], 'error');
    return;
  }
  $add_checkbox = TRUE;
  $add_tag_option = (!geshifilter_use_format_specific_options());
  $form['language_settings'] = geshifilter_per_language_settings(NULL, $view, $add_checkbox, $add_tag_option);
  $form['rescan_languages'] = array(
    '#type' => 'markup',
    '#value' => '<p>'. l(t('Flush cache of available languages'), 'geshifilter/clearavailablelanguagescache', NULL, drupal_get_destination()) .'</p>',
  );
  return system_settings_form($form);
}

/**
 * Submit function for per language settings
 */
function geshifilter_admin_per_language_settings_submit($form_id, $form_values) {
  // normal system_settings_form processing
  system_settings_form_submit($form_id, $form_values);
  // regenerate language_css
  if (_geshifilter_css_mode() == GESHIFILTER_CSS_CLASSES) {
    _geshifilter_generate_languages_css();
  }
  _geshifilter_clear_filter_cache();
}

/**
 * Menu callback for filter conflicts page
 */
function geshifilter_admin_filter_conflicts($check_only=FALSE) {
  require_once('geshifilter.conflicts.inc');
  return _geshifilter_admin_filter_conflicts($check_only);
}

/**
 * Implementation of hook_requirements()
 */
function geshifilter_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    // check if GeSHi library is available
    $geshi_library = _geshifilter_check_geshi_library();
    if (!$geshi_library['loaded']) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library not found.'),
        'description' => t('You should install the GeSHi library and set its path in the !geshisettings.',
          array('!geshisettings' => l('GeSHi settings', 'admin/settings/geshifilter'))),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Found GeSHi library version %version',
          array('%version' => GESHI_VERSION)), // GESHI_VERSION is defined in GeSHi library
        'severity' => REQUIREMENT_OK,
      );
    }
    // check for filter conflicts
    if (geshifilter_admin_filter_conflicts(TRUE) > 0) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Some filter conflicts were detected.'),
        'description' => l(t('View and resolve the detected filter conflicts'), 'admin/settings/geshifilter/filterconflicts'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Helper function for splitting a string on white spaces.
 * Using explode(' ', $string) is not enough because it returns empty elements
 * if $string contains consecutive spaces.
 */
function _geshifilter_whitespace_explode($string) {
  return preg_split('/\s+/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

function _geshifilter_tag_split($string) {
  return preg_split('/\s+|<|>|\[|\]/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

// General settings
function geshifilter_use_format_specific_options() {
  return variable_get('geshifilter_format_specific_options', FALSE);
}

function geshifilter_tags($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_tags', 'code blockcode');
  }
  return variable_get("geshifilter_tags_{$format}", geshifilter_tags());
}

function _geshifilter_php_delimeters($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_enable_php_delimiters', FALSE);
  }
  return variable_get("geshifilter_enable_php_delimiters_{$format}", _geshifilter_php_delimeters());
}

function _geshifilter_brackets($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_brackets', GESHIFILTER_BRACKETS_BOTH);
  }
  return variable_get("geshifilter_brackets_{$format}", _geshifilter_brackets());
}

function geshifilter_language_tags($language, $format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL)
    return variable_get("geshifilter_language_tags_{$language}", '');
  return variable_get("geshifilter_language_tags_{$language}_{$format}", geshifilter_language_tags($language));
}

/**
 * List of available languages.
 * @return an array mapping language code to array with the language path and full language name
 */
function _geshifilter_get_available_languages() {
  // try to get it from cache (database actually)
  $available_languages = variable_get('geshifilter_available_languages', NULL);
  if ($available_languages === NULL) {
    // not in cache: build the array of available_languages
    $geshi_library = _geshifilter_check_geshi_library();
    $available_languages = array();
    if ($geshi_library['success']) {
      $dirs = array(_geshifilter_get_geshi_dir() .'/geshi', drupal_get_path('module', 'geshifilter') .'/geshi-extra');
      foreach ($dirs as $dir) {
        foreach (file_scan_directory($dir, '\.[pP][hH][pP]$') as $filename => $fileinfo) {
          // short name
          $name = $fileinfo->name;
          // get full name
          $geshi = new GeSHi('', $name);
          $geshi->set_language_path($dir);
          $fullname = $geshi->get_language_name();
          unset($geshi);
          // store
          $available_languages[$name] = array('language_path' => $dir, 'fullname' => $fullname);
        }
      }
      ksort($available_languages);
      // save array to database
      variable_set('geshifilter_available_languages', $available_languages);
    }
  }
  return $available_languages;
}

/**
 * helper function for generating a GeSHi object
 * @param $language the language to generate a GeSHi object for
 */
function _geshifilter_GeSHi_factory($source_code, $language) {
  $available_languages = _geshifilter_get_available_languages();
  $geshi = new GeSHi($source_code, $language);
  $geshi->set_language_path($available_languages[$language]['language_path']);
  return $geshi;
}

/**
 * List of enabled languages.
 * (with caching)
 * @return array with enabled languages mapping language code to full name.
 */
function _geshifilter_get_enabled_languages() {
  static $enabled_languages = NULL;
  if ($enabled_languages === NULL) {
    $enabled_languages = array();
    $languages = _geshifilter_get_available_languages();
    foreach ($languages as $language => $language_data) {
      if (variable_get("geshifilter_language_enabled_{$language}", TRUE)) {
        $enabled_languages[$language] = $language_data['fullname'];
      }
    }
  }
  return $enabled_languages;
}

/**
 * Helper function for gettings the tags
 * (with caching)
 */
function _geshifilter_get_tags($format) {
  static $geshifilter_tags_cache = array();
  if (!isset($geshifilter_tags_cache[$format])) {
    $generic_code_tags = _geshifilter_tag_split(geshifilter_tags($format));
    $language_tags = array();
    $tag_to_lang = array();
    $enabled_languages = _geshifilter_get_enabled_languages();
    foreach ($enabled_languages as $language => $fullname) {
      $lang_tags = _geshifilter_tag_split(geshifilter_language_tags($language, $format));
      foreach ($lang_tags as $lang_tag) {
        $language_tags[] = $lang_tag;
        $tag_to_lang[$lang_tag] = $language;
      }
    }
    $geshifilter_tags_cache[$format] = array($generic_code_tags, $language_tags, $tag_to_lang);
  }
  return $geshifilter_tags_cache[$format];
}

/**
 * helper function for getting the CSS mode (considering the download method).
 */
function _geshifilter_css_mode() {
  $directory = file_directory_path();
  $external_css_possible = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);
  return $external_css_possible ? intval(variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE)) : GESHIFILTER_CSS_INLINE;
}

/**
 * Helper function for clearing the appropriate filter cache entries
 */
function _geshifilter_clear_filter_cache() {
  $message = FALSE;
  // iterate over input formats
  foreach (filter_formats() as $format => $input_format) {
    // Get the filters in this input format
    $filters = filter_list_format($format);
    // look if GeSHi is enabled in this input format
    if (isset($filters['geshifilter/0'])) {
      cache_clear_all($format .':', 'cache_filter', TRUE);
      $message = TRUE;
    }
  }
  // give a message that the filter cache was cleared
  if ($message) {
    drupal_set_message(t('GeSHi filter cleared the filter cache for the appropriate input formats.'));
  }
}

/**
 * callback function for clearing the available languages cache
 */
function geshifilter_clear_available_languages_cache() {
  variable_del('geshifilter_available_languages');
  drupal_set_message('Flushed cache of available languages.');
  drupal_goto();
}

/**
 * Function for generating the external stylesheet.
 */
function _geshifilter_generate_languages_css() {
  $languages = _geshifilter_get_enabled_languages();
  // create files/geshifilter directory if not already available
  $path = file_directory_path() .'/geshifilter';
  file_check_directory($path, FILE_CREATE_DIRECTORY);
  // make stylesheet file name (depends on enabled languages)
  $stylesheet_file = $path .'/geshifilter-languages-'. substr(md5(serialize($languages)), 0, 8) .'.css';
  if (!file_exists($stylesheet_file)) {
    require_once('geshifilter.pages.inc');
    // build stylesheet
    $stylesheet = '';
    foreach ($languages as $langcode => $language_full_name) {
      $geshi = _geshifilter_GeSHi_factory('', $langcode);
      _geshifilter_override_geshi_defaults($geshi, $langcode);
      $stylesheet .= $geshi->get_stylesheet(FALSE) ."\n";
      unset($geshi);
    }
    // save stylesheet
    $ret = file_save_data($stylesheet, $stylesheet_file, FILE_EXISTS_REPLACE);
    if ($ret) {
      variable_set('geshifilter_languages_css', $ret);
      drupal_set_message(t('Generated external CSS file %file.', array('%file' => $ret)));
    }
    else {
      drupal_set_message(t('Could not generate external CSS file. Check the settings of your !filesystem.',
        array('!filesystem' => l(t('file system'), 'admin/settings/file-system'))), 'error');
    }
  }
}
