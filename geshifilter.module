<?php
// $Id$

/**
 * @file
 * An input filter for syntax highlighting using the GeSHi library.
 */

define('GESHIFILTER_DEFAULT_PLAINTEXT', 'GESHIFILTER_DEFAULT_PLAINTEXT');
define('GESHIFILTER_DEFAULT_DONOTHING', 'GESHIFILTER_DEFAULT_DONOTHING');

define('GESHIFILTER_CSS_INLINE', 1);
define('GESHIFILTER_CSS_CLASSES', 2);

define('GESHIFILTER_ATTRIBUTES_LANGUAGE', 'type lang language');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING', 'linenumbers');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START', 'start');
define('GESHIFILTER_ATTRIBUTE_FANCY_N', 'fancy');

define('GESHIFILTER_BRACKETS_ANGLE', 1);
define('GESHIFILTER_BRACKETS_SQUARE', 2);
define('GESHIFILTER_BRACKETS_BOTH', 3);

define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE', 0);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL', 1);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY5', 5);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY10', 10);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY20', 20);

/**
 * Implementation of hook_help().
 */
function geshifilter_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/geshifilter':
    case 'admin/help#geshifilter':
      $output = '<p>'. t('The GeSHi filter module provides a filter for syntax highlighting of inline source code or blocks of source code based on the PHP library !GeSHi.', array('!GeSHi' => l('GeSHi (Generic Syntax Highlighter)', 'http://qbnz.com/highlighter/'))) .'</p>';
      if ($path == 'admin/help#geshifilter') {
        $output .= '<p>'. t('The GeSHi filter module for Drupal requires the GeSHi library (version 1.0.x) to work. The GeSHi filter is actually just a Drupal wrapper module around the GeSHi library. Because of <a href="!repositorypolicies">drupal.org repository policies</a> however, the GeSHi library is not included in the GeSHi filter package, so you should <a href="!geshi">download</a> and install the GeSHi library separately.', array(
          '!repositorypolicies' => url('http://drupal.org/node/66113'),
          '!geshi' => url('http://qbnz.com/highlighter/'),
        )) .'</p>';
        $output .= t('<p>Quick overview of how to set up and use the GeSHi filter:</p><ul><li>Install the GeSHi library and specify its path on the <a href="!geshifilter_settings">GeSHi filter administration page</a>.</li><li>Configure the <a href="!geshifilter_settings">general GeSHi filter settings</a>.</li><li><a href="!geshifilter_languages">Enable the relevant languages</a> for your site.</li><li>Enable the GeSHi filter in the desired !inputformats.</li><li>Check for !filterconflicts and resolve them.</li><li>Use the input format during content submission as described in the !filtertips.</li></ul>', array(
          '!geshifilter_settings' => url('admin/settings/geshifilter'),
          '!geshifilter_languages' => url('admin/settings/geshifilter/languages/all'),
          '!inputformats' => l(t('input formats'), 'admin/settings/filters'),
          '!filterconflicts' => l(t('filter conflicts'), 'admin/settings/geshifilter/filterconflicts'),
          '!filtertips' => l(t('filter tips'), 'filter/tips'),
        ));
        $output .= '<p>'. t('After changing the general GeSHi filter settings, it is typically needed to <a href="!clearfiltercache">clear the filter cache</a> before the changes take effect on old content.', array('!clearfiltercache' => url('geshifilter/clearfiltercache', array('query' => drupal_get_destination())))) .'</p>';
      }
      return $output;
      break;
    case 'admin/settings/geshifilter/languages':
    case 'admin/settings/geshifilter/languages/enabled':
    case 'admin/settings/geshifilter/languages/all':
    case 'admin/settings/geshifilter/languages/disabled':
      $output = '<p>'. t('Here you can enable/disable the desired languages to use. It is suggested to disable languages that are not relevant for you site not only to avoid unnecessary cluttering of the GeSHi filter configuration pages and the !filtertips, but also to make the GeSHi filter processing lighter.', array('!filtertips' => l(t('filter tips'), 'filter/tips'))) .'</p>';
      if (!geshifilter_use_format_specific_options()) {
        $output .= '<p>'. t('You can also define the language specific tags here.') .'</p>';
      }
      return $output;
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function geshifilter_menu() {
  $items = array();
  $items['admin/settings/geshifilter'] = array(
    'title' => 'GeSHi Filter',
    'description' => 'Configure the GeSHi filter.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geshifilter_admin_general_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/geshifilter/general'] = array(
    'title' => 'General settings',
    'description' => 'General GeSHi filter settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/filterconflicts'] = array(
    'title' => 'Filter conflicts',
    'description' => 'Information on possible conflicts with other filters.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'geshifilter_admin_filter_conflicts',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  // language settings
  $items['admin/settings/geshifilter/languages'] = array(
    'title' => 'Languages',
    'description' => 'Enable the desired languages and configure their settings.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geshifilter_admin_per_language_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/languages/enabled'] = array(
    'title' => 'Enabled',
    'description' => 'Show the enabled languages',
    'weight' => 3,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/languages/all'] = array(
    'title' => 'All',
    'description' => 'Show all the available languages',
    'page arguments' => array('geshifilter_admin_per_language_settings', 4),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/languages/disabled'] = array(
    'title' => 'Disabled',
    'description' => 'Show the disabled languages',
    'page arguments' => array('geshifilter_admin_per_language_settings', 4),
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );
  // clear filter cache callback
  $items['geshifilter/clearfiltercache'] = array(
    'title' => t('Clear filter cache'),
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'geshifilter_clear_filter_cache',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  // clear available languages cache
  $items['geshifilter/clearavailablelanguagescache'] = array(
    'title' => t('Clear available languages cache'),
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'geshifilter_clear_available_languages_cache',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
 return $items;
}

/**
 * Implementation of hook_init()
 */
function geshifilter_init() {
  // Since the filtered content is cached, it is not possible to know on which
  // pages the css file is actually needed. Thus it is included on all pages.
  if (_geshifilter_css_mode() == GESHIFILTER_CSS_CLASSES) {
    if ($stylesheet_file = variable_get('geshifilter_languages_css', NULL)) {
    dvm($stylesheet_file);
      drupal_add_css($stylesheet_file);
    }
  }
  drupal_add_css(drupal_get_path('module', 'geshifilter') .'/geshifilter.css');
}

/**
 * Implementation of hook_filter_tips().
 */
function geshifilter_filter_tips($delta, $format, $long = false) {
  if (_geshifilter_brackets($format) == GESHIFILTER_BRACKETS_SQUARE) {
    $bracket_open = '[';
    $bracket_close = ']';
  }
  else {
    // default brackets
    $bracket_open = '&lt;';
    $bracket_close = '&gt;';
  }

  if ($long) {
    // get the available tags
    list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
    // get the available languages
    $languages = _geshifilter_get_enabled_languages();
    $lang_attributes = _geshifilter_whitespace_explode(GESHIFILTER_ATTRIBUTES_LANGUAGE);

    // syntax highlighting tags
    $output = '<p>'. t('Syntax highlighting of source code can be enabled with the following tags:') .'</p>';
    $items = array();
    // generic tags
    $tags = array();
    foreach ($generic_code_tags as $tag) {
      $tags[] = '"<code>'. $bracket_open . $tag . $bracket_close .'</code>"';
    }
    $items[] = t('Generic syntax highlighting tags: !tags.', array('!tags' => implode(', ', $tags)));
    // language tags
    $tags = array();
    foreach ($language_tags as $tag) {
      $tags[] = '"<code>'. $bracket_open . $tag . $bracket_close .'</code>" '. t('for @lang source code', array('@lang' => $languages[$tag_to_lang[$tag]]));
    }
    $items[] = t('Language specific syntax highlighting tags: !tags.', array('!tags' => implode(', ', $tags)));
    // PHP specific delimiters
    if (_geshifilter_php_delimeters($format)) {
      $items[] = t('PHP source code can also be enclosed in &lt;?php ... ?&gt; or &lt;% ... %&gt;, but additional options like line numbering are not possible here.');
    }

    $output .= theme('item_list', $items);

    // Options and tips
    $output .= '<p>'. t('Options and tips:') .'</p>';
    $items = array();
    // enabled languages
    $enabled_languages = array();
    foreach ($languages as $langcode => $fullname) {
      $enabled_languages[] = t('"<code>@langcode</code>" (for @fullname)', array('@langcode' => $langcode, '@fullname' => $fullname));
    }
    $items[] = t('The language for the generic syntax highlighting tags can be specified with one of the attribute(s): %attributes. The possible values are: !languages.', array('%attributes' => implode(', ', $lang_attributes), '!languages' => implode(', ', $enabled_languages)));
    // line numbering options
    $items[] = t('<em>Line numbering</em> can be enabled/disabled with the attribute "%linenumbers". Possible values are: "%off" for no line numbers, "%normal" for normal line numbers and "%fancy" for fancy line numbers (every n<sup>th</sup> line number highlighted). The start line number can be specified with the attribute "%start", which implicitly enables normal line numbering. For fancy line numbering the interval for the highlighted line numbers can be specified with the attribute "%fancy", which implicitly enables fancy line numbering.', array('%linenumbers' => GESHIFILTER_ATTRIBUTE_LINE_NUMBERING, '%off' => 'off', '%normal' => 'normal', '%fancy' => 'fancy', '%start' => GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START, '%fancy' => GESHIFILTER_ATTRIBUTE_FANCY_N));
    $items[] = t('If the source code between the tags contains a newline (e.g. immediatly after the opening tag), the highlighted source code will be displayed as a code block. Otherwise it will be displayed inline.');
    if (_geshifilter_brackets($format) == GESHIFILTER_BRACKETS_BOTH) {
      $items[] = t('Beside the tag style "!angle" it is also possible to use "!bracket".' , array('!angle' => '<code>&lt;foo&gt;</code>', '!bracket' => '<code>[foo]</code>'));
    }
    $output .= theme('item_list', $items);

    // Defaults
    $output .= '<p>'. t('Defaults:') .'</p>';
    $items = array();
    $default_highlighting = variable_get('geshifilter_default_highlighting', GESHIFILTER_DEFAULT_PLAINTEXT);
    switch ($default_highlighting) {
      case GESHIFILTER_DEFAULT_DONOTHING:
        $description =  t('when no language attribute is specified the code block won\'t be processed by the GeSHi filter');
        break;
      case GESHIFILTER_DEFAULT_PLAINTEXT:
        $description = t('when no language attribute is specified, no syntax highlighting will be done');
        break;
      default:
        $description = t('the default language used for syntax highlighting is "%default_lang"', array('%default_lang' => $default_highlighting));
        break;
    }
    $items[] = t('Default highlighting mode for generic syntax highlighting tags: !description.', array('!description' => $description));
    $default_line_numbering = variable_get('geshifilter_default_line_numbering', GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE);
    switch ($default_line_numbering) {
      case GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE:
        $description = t('no line numbers');
        break;
      case GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL:
        $description = t('normal line numbers');
        break;
      default:
        $description = t('fancy line numbers (every @n lines)', array('@n' => $default_line_numbering));
        break;
    }
    $items[] = t('Default line numbering: !description.', array('!description' => $description));
    $output .= theme('item_list', $items);

    // Examples
    $output .= '<p>'. t('Examples:') .'</p>';
    $header = array(t('You type'), t('You get'));
    $rows = array();
    if (count($generic_code_tags)) {
      $generic_code_tag = $generic_code_tags[0];
      $lang = array_rand($languages);
      $generic_code_tag_open = $bracket_open . $generic_code_tag;
      $generic_code_tag_close = $bracket_open .'/'. $generic_code_tag . $bracket_close;
      $rows[] = array(
        '<code>'. $generic_code_tag_open . $bracket_close .'foo = "bar";'. $generic_code_tag_close .'</code>',
        t('Inline code with the default syntax highlighting mode.'),
      );
      $rows[] = array(
        '<code>'. $generic_code_tag_open . $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $generic_code_tag_close .'</code>',
        t('Code block with the default syntax highlighting mode.'),
      );
      $rows[] = array(
        '<code>'. $generic_code_tag_open .' '. $lang_attributes[1 % count($lang_attributes)] .'="'. $lang .'" '. GESHIFILTER_ATTRIBUTE_LINE_NUMBERING .'="normal"'. $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $generic_code_tag_close .'</code>',
        t('Code block with syntax highlighting for @lang source code<br /> and normal line numbers.', array('@lang' => $languages[$lang])),
      );
      $rows[] = array(
        '<code>'. $generic_code_tag_open .' '. $lang_attributes[2 % count($lang_attributes)] .'="'. $lang .'" '. GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START .'="23" '. GESHIFILTER_ATTRIBUTE_FANCY_N .'="7"'. $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $generic_code_tag_close .'</code>',
        t('Code block with syntax highlighting for @lang source code,<br />line numbers starting from 23<br /> and highlighted line numbers every 7<sup>th</sup> line.', array('@lang' => $languages[$lang])),
      );
    }
    if (count($language_tags)) {
      $language_tag = $language_tags[0];
      $rows[] = array(
        '<code>'. $bracket_open . $language_tag . $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $bracket_open .'/'. $language_tag . $bracket_close .'</code>',
        t('Code block with syntax highlighting for @lang source code.', array('@lang' => $languages[$tag_to_lang[$language_tag]])),
      );
      $rows[] = array(
        '<code>'. $bracket_open . $language_tag .' '. GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START .'="23" '. GESHIFILTER_ATTRIBUTE_FANCY_N .'="7"'. $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $bracket_open . $language_tag . $bracket_close .'</code>',
        t('Code block with syntax highlighting for @lang source code,<br />line numbers starting from 23<br /> and highlighted line numbers every 7<sup>th</sup> line.', array('@lang' => $languages[$tag_to_lang[$language_tag]])),
      );
    }
    $output .= theme('table', $header, $rows);
    return $output;
  }
  else {
    // get the available tags
    list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
    $tags = array();
    foreach ($generic_code_tags as $tag) {
      $tags[] = '<code>'. $bracket_open . $tag . $bracket_close .'</code>';
    }
    foreach ($language_tags as $tag) {
      $tags[] = '<code>'. $bracket_open . $tag . $bracket_close .'</code>';
    }
    $output = t('You can enable syntax highlighting of source code with the following tags: !tags.', array('!tags' => implode(', ', $tags)));
    if (_geshifilter_brackets($format) == GESHIFILTER_BRACKETS_BOTH) {
      $output .= ' '. t('Beside the tag style "!angle" it is also possible to use "!bracket".' , array('!angle' => '<code>&lt;foo&gt;</code>', '!bracket' => '<code>[foo]</code>'));
    }
    if (_geshifilter_php_delimeters($format)) {
      $output .= ' '. t('PHP source code can also be enclosed in &lt;?php ... ?&gt; or &lt;% ... %&gt;.');
    }
    return $output;
  }
}

/**
 * Implementation of hook_filter().
 */
function geshifilter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array('GeSHi filter');

    case 'description':
      return t('Enables syntax highlighting of inline/block source code using the GeSHi engine');

    case 'prepare':
      require_once('geshifilter.pages.inc');
      return _geshifilter_prepare($format, $text);

    case 'process':
      require_once('geshifilter.pages.inc');
      return _geshifilter_process($format, $text);

    case 'settings':
      return _geshifilter_filter_settings($format);

    case 'no cache':
      return false;

    default:
      return $text;
  }
}

/**
 * Implementation of hook_theme().
 */
function geshifilter_theme() {
  return array(
    'geshifilter_per_language_settings' => array(
      'arguments' => array('form' => NULL)
    )
  );
}

function _geshifilter_get_geshi_dir() {
  return variable_get('geshifilter_geshi_dir', drupal_get_path('module', 'geshifilter') .'/geshi');
}

/**
 * Helper function for loading/checking the GeSHi library v 1.0.x (if not already)
 * Returns an array with keys 'success', 'loaded' and 'message'
 */
function _geshifilter_check_geshi_library($use_cache=TRUE, $geshi_dir=NULL, $load_when_found=TRUE) {
  static $geshi_library_cache = NULL;
  if ($use_cache && $geshi_library_cache !== NULL) {
    // get from cache
    $geshi_library = $geshi_library_cache;
  }
  else {
    // initialisation
    $geshi_library = array('success' => NULL, 'loaded' => FALSE, 'message' => NULL);
    // no cache
    if (!$geshi_dir) {
      $geshi_dir = _geshifilter_get_geshi_dir();
    }
    if (!is_dir($geshi_dir)) {
      $geshi_library['success'] = FALSE;
      $geshi_library['message'] = t('GeSHi library error: %dir is not a directory.', array('%dir' => $geshi_dir));
    }
    elseif (is_file($geshi_dir .'/geshi.php')) {
      // GeSHi 1.0.x found (probably, we can only be sure by loading it)
      $geshi_library['success'] = TRUE;
      if ($load_when_found) {
        require_once($geshi_dir .'/geshi.php');
        // check version
        $geshi_library_version = explode('.', GESHI_VERSION);
        if (!($geshi_library_version[0] == '1' &&  $geshi_library_version[1] == '0')) {
          $geshi_library['success'] = FALSE;
          $geshi_library['loaded'] = FALSE;
          $geshi_library['message'] = t('GeSHi library error: The detected version of GeSHi library (%version) is not supported. A version from the 1.0.x branch is required.', array('%version' => GESHI_VERSION));
        }
        else {
          $geshi_library['loaded'] = TRUE;
        }
      }
    }
    else {
      $geshi_library['success'] = FALSE;
      $geshi_library['message'] = t('GeSHi library error: Could not find a known version of the GeSHi library at %dir.' , array('%dir' => $geshi_dir));
    }
    // store in cache if needed
    if ($use_cache) {
      $geshi_library_cache = $geshi_library;
    }
  }
  return $geshi_library;
}

/**
 * Form (items) for filter settings.
 */
function _geshifilter_filter_settings($format) {
  $form = array();
  $form['geshifilter'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi filter'),
    '#collapsible' => TRUE,
  );
  if (geshifilter_use_format_specific_options()) {
    require_once('geshifilter.admin.inc');
    // tags and attributes
    $form['geshifilter']['general_tags'] = _geshifilter_general_highlight_tags_settings($format);
    // per language tags
    $form['geshifilter']['per_language_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Per language tags'),
      '#collapsible' => TRUE,
      'table' => geshifilter_per_language_settings($format, 'enabled', FALSE, TRUE),
    );
  }
  else {
    $form['geshifilter']['info'] = array(
      '#value' => '<p>'. t('The <a href="!geshi_admin_url">general settings</a> are used for the GeSHi filter . If you want specific settings per input format, you first have to enable this option in the <a href="!geshi_admin_url">general settings</a>.', array('!geshi_admin_url' => url('admin/settings/geshifilter'))) .'</p>'
    );
  }
  return $form;
}
/**
 * Implementation of hook_requirements()
 */
function geshifilter_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    // check if GeSHi library is available
    $geshi_library = _geshifilter_check_geshi_library();
    if (!$geshi_library['loaded']) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library not found.'),
        'description' => t('You should install the GeSHi library and set its path in the !geshisettings.',
          array('!geshisettings' => l('GeSHi settings', 'admin/settings/geshifilter'))),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Found GeSHi library version %version',
          array('%version' => GESHI_VERSION)), // GESHI_VERSION is defined in GeSHi library
        'severity' => REQUIREMENT_OK,
      );
    }
    // check for filter conflicts
    require_once('geshifilter.admin.inc');
    if (geshifilter_admin_filter_conflicts(TRUE) > 0) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Some filter conflicts were detected.'),
        'description' => l(t('View and resolve the detected filter conflicts'), 'admin/settings/geshifilter/filterconflicts'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Helper function for splitting a string on white spaces.
 * Using explode(' ', $string) is not enough because it returns empty elements
 * if $string contains consecutive spaces.
 */
function _geshifilter_whitespace_explode($string) {
  return preg_split('/\s+/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

function _geshifilter_tag_split($string) {
  return preg_split('/\s+|<|>|\[|\]/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

// General settings
function geshifilter_use_format_specific_options() {
  return variable_get('geshifilter_format_specific_options', FALSE);
}

function geshifilter_tags($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_tags', 'code blockcode');
  }
  return variable_get("geshifilter_tags_{$format}", geshifilter_tags());
}

function _geshifilter_php_delimeters($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_enable_php_delimiters', FALSE);
  }
  return variable_get("geshifilter_enable_php_delimiters_{$format}", _geshifilter_php_delimeters());
}

function _geshifilter_brackets($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_brackets', GESHIFILTER_BRACKETS_BOTH);
  }
  return variable_get("geshifilter_brackets_{$format}", _geshifilter_brackets());
}

function geshifilter_language_tags($language, $format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL)
    return variable_get("geshifilter_language_tags_{$language}", '');
  return variable_get("geshifilter_language_tags_{$language}_{$format}", geshifilter_language_tags($language));
}

/**
 * List of available languages.
 * @return an array mapping language code to array with the language path and full language name
 */
function _geshifilter_get_available_languages() {
  // try to get it from cache (database actually)
  $available_languages = variable_get('geshifilter_available_languages', NULL);
  if ($available_languages === NULL) {
    // not in cache: build the array of available_languages
    $geshi_library = _geshifilter_check_geshi_library();
    $available_languages = array();
    if ($geshi_library['success']) {
      $dirs = array(_geshifilter_get_geshi_dir() .'/geshi', drupal_get_path('module', 'geshifilter') .'/geshi-extra');
      foreach ($dirs as $dir) {
        foreach (file_scan_directory($dir, '\.[pP][hH][pP]$') as $filename => $fileinfo) {
          // short name
          $name = $fileinfo->name;
          // get full name
          $geshi = new GeSHi('', $name);
          $geshi->set_language_path($dir);
          $fullname = $geshi->get_language_name();
          unset($geshi);
          // store
          $available_languages[$name] = array('language_path' => $dir, 'fullname' => $fullname);
        }
      }
      ksort($available_languages);
      // save array to database
      variable_set('geshifilter_available_languages', $available_languages);
    }
  }
  return $available_languages;
}

/**
 * helper function for generating a GeSHi object
 * @param $language the language to generate a GeSHi object for
 */
function _geshifilter_geshi_factory($source_code, $language) {
  $available_languages = _geshifilter_get_available_languages();
  $geshi = new GeSHi($source_code, $language);
  $geshi->set_language_path($available_languages[$language]['language_path']);
  return $geshi;
}

/**
 * List of enabled languages.
 * (with caching)
 * @return array with enabled languages mapping language code to full name.
 */
function _geshifilter_get_enabled_languages() {
  static $enabled_languages = NULL;
  if ($enabled_languages === NULL) {
    $enabled_languages = array();
    $languages = _geshifilter_get_available_languages();
    foreach ($languages as $language => $language_data) {
      if (variable_get("geshifilter_language_enabled_{$language}", FALSE)) {
        $enabled_languages[$language] = $language_data['fullname'];
      }
    }
  }
  return $enabled_languages;
}

/**
 * Helper function for gettings the tags
 * (with caching)
 */
function _geshifilter_get_tags($format) {
  static $geshifilter_tags_cache = array();
  if (!isset($geshifilter_tags_cache[$format])) {
    $generic_code_tags = _geshifilter_tag_split(geshifilter_tags($format));
    $language_tags = array();
    $tag_to_lang = array();
    $enabled_languages = _geshifilter_get_enabled_languages();
    foreach ($enabled_languages as $language => $fullname) {
      $lang_tags = _geshifilter_tag_split(geshifilter_language_tags($language, $format));
      foreach ($lang_tags as $lang_tag) {
        $language_tags[] = $lang_tag;
        $tag_to_lang[$lang_tag] = $language;
      }
    }
    $geshifilter_tags_cache[$format] = array($generic_code_tags, $language_tags, $tag_to_lang);
  }
  return $geshifilter_tags_cache[$format];
}

/**
 * helper function for getting the CSS mode (considering the download method).
 */
function _geshifilter_css_mode() {
  $directory = file_directory_path();
  $external_css_possible = is_dir($directory) && is_writable($directory) && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC);
  return $external_css_possible ? intval(variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE)) : GESHIFILTER_CSS_INLINE;
}
