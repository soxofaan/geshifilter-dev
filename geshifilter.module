<?php
// $Id$

/**
 * @file
 * An input filter for syntax highlighting using the GeSHi library.
 */

define('GESHIFILTER_DEFAULT_PLAINTEXT', 'GESHIFILTER_DEFAULT_PLAINTEXT');
define('GESHIFILTER_DEFAULT_DONOTHING', 'GESHIFILTER_DEFAULT_DONOTHING');

define('GESHIFILTER_CSS_INLINE', 1);
define('GESHIFILTER_CSS_CLASSES', 2);

define('GESHIFILTER_ATTRIBUTES_LANGUAGE', 'type lang language');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING', 'linenumbers');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START', 'start');
define('GESHIFILTER_ATTRIBUTE_FANCY_N', 'fancy');

define('GESHIFILTER_BRACKETS_ANGLE', 1);
define('GESHIFILTER_BRACKETS_SQUARE', 2);
define('GESHIFILTER_BRACKETS_BOTH', 3);

define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE', 0);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL', 1);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY5', 5);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY10', 10);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY20', 20);

/**
 * Implementation of hook_help().
 */
function geshifilter_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/geshifilter':
    case 'admin/help#geshifilter':
      $output = '<p>'. t('The GeSHi filter module provides a filter for syntax highlighting of inline source code or blocks of source code based on the PHP library !GeSHi.', array('!GeSHi' => l('GeSHi (Generic Syntax Highlighter)', 'http://qbnz.com/highlighter/'))) .'</p>';
      if ($path == 'admin/help#geshifilter') {
        $output .= '<p>'. t('The GeSHi filter module for Drupal requires the GeSHi library (version 1.0.x) to work. The GeSHi filter is actually just a Drupal wrapper module around the GeSHi library. Because of <a href="!repositorypolicies">drupal.org repository policies</a> however, the GeSHi library is not included in the GeSHi filter package, so you should <a href="!geshi">download</a> and install the GeSHi library separately.', array(
          '!repositorypolicies' => url('http://drupal.org/node/66113'),
          '!geshi' => url('http://qbnz.com/highlighter/'),
        )) .'</p>';
        $output .= t('<p>Quick overview of how to set up and use the GeSHi filter:</p><ul><li>Install the GeSHi library and specify its path on the <a href="!geshifilter_settings">GeSHi filter administration page</a>.</li><li>Configure the <a href="!geshifilter_settings">general GeSHi filter settings</a>.</li><li><a href="!geshifilter_languages">Enable the relevant languages</a> for your site.</li><li>Enable the GeSHi filter in the desired !inputformats.</li><li>Check for !filterconflicts and resolve them.</li><li>Use the input format during content submission as described in the !filtertips.</li></ul>', array(
          '!geshifilter_settings' => url('admin/settings/geshifilter'),
          '!geshifilter_languages' => url('admin/settings/geshifilter/languages/all'),
          '!inputformats' => l(t('input formats'), 'admin/settings/filters'),
          '!filterconflicts' => l(t('filter conflicts'), 'admin/settings/geshifilter/filterconflicts'),
          '!filtertips' => l(t('filter tips'), 'filter/tips'),
        ));
        $output .= '<p>'. t('After changing the general GeSHi filter settings, it is typically needed to <a href="!clearfiltercache">clear the filter cache</a> before the changes take effect on old content.', array('!clearfiltercache' => url('geshifilter/clearfiltercache', array('query' => drupal_get_destination())))) .'</p>';
      }
      return $output;
      break;
    case 'admin/settings/geshifilter/languages':
    case 'admin/settings/geshifilter/languages/enabled':
    case 'admin/settings/geshifilter/languages/all':
    case 'admin/settings/geshifilter/languages/disabled':
      $output = '<p>'. t('Here you can enable/disable the desired languages to use. It is suggested to disable languages that are not relevant for you site not only to avoid unnecessary cluttering of the GeSHi filter configuration pages and the !filtertips, but also to make the GeSHi filter processing lighter.', array('!filtertips' => l(t('filter tips'), 'filter/tips'))) .'</p>';
      if (!geshifilter_use_format_specific_options()) {
        $output .= '<p>'. t('You can also define the language specific tags here.') .'</p>';
      }
      return $output;
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function geshifilter_menu() {
  $items = array();
  $items['admin/settings/geshifilter'] = array(
    'title' => 'GeSHi Filter',
    'description' => 'Configure the GeSHi filter.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geshifilter_admin_general_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/geshifilter/general'] = array(
    'title' => 'General settings',
    'description' => 'General GeSHi filter settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/filterconflicts'] = array(
    'title' => 'Filter conflicts',
    'description' => 'Information on possible conflicts with other filters.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'geshifilter_admin_filter_conflicts',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  // language settings
  $items['admin/settings/geshifilter/languages'] = array(
    'title' => 'Languages',
    'description' => 'Enable the desired languages and configure their settings.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geshifilter_admin_per_language_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/languages/enabled'] = array(
    'title' => 'Enabled',
    'description' => 'Show the enabled languages',
    'weight' => 3,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/languages/all'] = array(
    'title' => 'All',
    'description' => 'Show all the available languages',
    'page arguments' => array('geshifilter_admin_per_language_settings', 4),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/geshifilter/languages/disabled'] = array(
    'title' => 'Disabled',
    'description' => 'Show the disabled languages',
    'page arguments' => array('geshifilter_admin_per_language_settings', 4),
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );
  // clear filter cache callback
  $items['geshifilter/clearfiltercache'] = array(
    'title' => t('Clear filter cache'),
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'geshifilter_clear_filter_cache',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  // clear available languages cache
  $items['geshifilter/clearavailablelanguagescache'] = array(
    'title' => t('Clear available languages cache'),
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'geshifilter_clear_available_languages_cache',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
 return $items;
}

/**
 * Implementation of hook_init()
 */
function geshifilter_init() {
  // Since the filtered content is cached, it is not possible to know on which
  // pages the css file is actually needed. Thus it is included on all pages.
  if (variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE) == GESHIFILTER_CSS_CLASSES) {
    if ($stylesheet_file = variable_get('geshifilter_languages_css', NULL)) {
      drupal_add_css($stylesheet_file);
    }
  }
  drupal_add_css(drupal_get_path('module', 'geshifilter') .'/geshifilter.css');
}

/**
 * Implementation of hook_filter_tips().
 */
function geshifilter_filter_tips($delta, $format, $long = false) {
  if (_geshifilter_brackets($format) == GESHIFILTER_BRACKETS_SQUARE) {
    $bracket_open = '[';
    $bracket_close = ']';
  }
  else {
    // default brackets
    $bracket_open = '&lt;';
    $bracket_close = '&gt;';
  }

  if ($long) {
    // get the available tags
    list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
    // get the available languages
    $languages = _geshifilter_get_enabled_languages();
    $lang_attributes = _geshifilter_whitespace_explode(GESHIFILTER_ATTRIBUTES_LANGUAGE);

    // syntax highlighting tags
    $output = '<p>'. t('Syntax highlighting of source code can be enabled with the following tags:') .'</p>';
    $items = array();
    // generic tags
    $tags = array();
    foreach ($generic_code_tags as $tag) {
      $tags[] = '"<code>'. $bracket_open . $tag . $bracket_close .'</code>"';
    }
    $items[] = t('Generic syntax highlighting tags: !tags.', array('!tags' => implode(', ', $tags)));
    // language tags
    $tags = array();
    foreach ($language_tags as $tag) {
      $tags[] = '"<code>'. $bracket_open . $tag . $bracket_close .'</code>" '. t('for @lang source code', array('@lang' => $languages[$tag_to_lang[$tag]]));
    }
    $items[] = t('Language specific syntax highlighting tags: !tags.', array('!tags' => implode(', ', $tags)));
    // PHP specific delimiters
    if (_geshifilter_php_delimeters($format)) {
      $items[] = t('PHP source code can also be enclosed in &lt;?php ... ?&gt; or &lt;% ... %&gt;, but additional options like line numbering are not possible here.');
    }

    $output .= theme('item_list', $items);

    // Options and tips
    $output .= '<p>'. t('Options and tips:') .'</p>';
    $items = array();
    // enabled languages
    $enabled_languages = array();
    foreach ($languages as $langcode => $fullname) {
      $enabled_languages[] = t('"<code>@langcode</code>" (for @fullname)', array('@langcode' => $langcode, '@fullname' => $fullname));
    }
    $items[] = t('The language for the generic syntax highlighting tags can be specified with one of the attribute(s): %attributes. The possible values are: !languages.', array('%attributes' => implode(', ', $lang_attributes), '!languages' => implode(', ', $enabled_languages)));
    // line numbering options
    $items[] = t('<em>Line numbering</em> can be enabled/disabled with the attribute "%linenumbers". Possible values are: "%off" for no line numbers, "%normal" for normal line numbers and "%fancy" for fancy line numbers (every n<sup>th</sup> line number highlighted). The start line number can be specified with the attribute "%start", which implicitly enables normal line numbering. For fancy line numbering the interval for the highlighted line numbers can be specified with the attribute "%fancy", which implicitly enables fancy line numbering.', array('%linenumbers' => GESHIFILTER_ATTRIBUTE_LINE_NUMBERING, '%off' => 'off', '%normal' => 'normal', '%fancy' => 'fancy', '%start' => GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START, '%fancy' => GESHIFILTER_ATTRIBUTE_FANCY_N));
    $items[] = t('If the source code between the tags contains a newline (e.g. immediatly after the opening tag), the highlighted source code will be displayed as a code block. Otherwise it will be displayed inline.');
    if (_geshifilter_brackets($format) == GESHIFILTER_BRACKETS_BOTH) {
      $items[] = t('Beside the tag style "!angle" it is also possible to use "!bracket".' , array('!angle' => '<code>&lt;foo&gt;</code>', '!bracket' => '<code>[foo]</code>'));
    }
    $output .= theme('item_list', $items);

    // Defaults
    $output .= '<p>'. t('Defaults:') .'</p>';
    $items = array();
    $default_highlighting = variable_get('geshifilter_default_highlighting', GESHIFILTER_DEFAULT_PLAINTEXT);
    switch ($default_highlighting) {
      case GESHIFILTER_DEFAULT_DONOTHING:
        $description =  t('when no language attribute is specified the code block won\'t be processed by the GeSHi filter');
        break;
      case GESHIFILTER_DEFAULT_PLAINTEXT:
        $description = t('when no language attribute is specified, no syntax highlighting will be done');
        break;
      default:
        $description = t('the default language used for syntax highlighting is "%default_lang"', array('%default_lang' => $default_highlighting));
        break;
    }
    $items[] = t('Default highlighting mode for generic syntax highlighting tags: !description.', array('!description' => $description));
    $default_line_numbering = variable_get('geshifilter_default_line_numbering', GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE);
    switch ($default_line_numbering) {
      case GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE:
        $description = t('no line numbers');
        break;
      case GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL:
        $description = t('normal line numbers');
        break;
      default:
        $description = t('fancy line numbers (every @n lines)', array('@n' => $default_line_numbering));
        break;
    }
    $items[] = t('Default line numbering: !description.', array('!description' => $description));
    $output .= theme('item_list', $items);

    // Examples
    $output .= '<p>'. t('Examples:') .'</p>';
    $header = array(t('You type'), t('You get'));
    $rows = array();
    if (count($generic_code_tags)) {
      $generic_code_tag = $generic_code_tags[0];
      $lang = array_rand($languages);
      $generic_code_tag_open = $bracket_open . $generic_code_tag;
      $generic_code_tag_close = $bracket_open .'/'. $generic_code_tag . $bracket_close;
      $rows[] = array(
        '<code>'. $generic_code_tag_open . $bracket_close .'foo = "bar";'. $generic_code_tag_close .'</code>',
        t('Inline code with the default syntax highlighting mode.'),
      );
      $rows[] = array(
        '<code>'. $generic_code_tag_open . $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $generic_code_tag_close .'</code>',
        t('Code block with the default syntax highlighting mode.'),
      );
      $rows[] = array(
        '<code>'. $generic_code_tag_open .' '. $lang_attributes[1 % count($lang_attributes)] .'="'. $lang .'" '. GESHIFILTER_ATTRIBUTE_LINE_NUMBERING .'="normal"'. $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $generic_code_tag_close .'</code>',
        t('Code block with syntax highlighting for @lang source code<br /> and normal line numbers.', array('@lang' => $languages[$lang])),
      );
      $rows[] = array(
        '<code>'. $generic_code_tag_open .' '. $lang_attributes[2 % count($lang_attributes)] .'="'. $lang .'" '. GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START .'="23" '. GESHIFILTER_ATTRIBUTE_FANCY_N .'="7"'. $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $generic_code_tag_close .'</code>',
        t('Code block with syntax highlighting for @lang source code,<br />line numbers starting from 23<br /> and highlighted line numbers every 7<sup>th</sup> line.', array('@lang' => $languages[$lang])),
      );
    }
    if (count($language_tags)) {
      $language_tag = $language_tags[0];
      $rows[] = array(
        '<code>'. $bracket_open . $language_tag . $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $bracket_open .'/'. $language_tag . $bracket_close .'</code>',
        t('Code block with syntax highlighting for @lang source code.', array('@lang' => $languages[$tag_to_lang[$language_tag]])),
      );
      $rows[] = array(
        '<code>'. $bracket_open . $language_tag .' '. GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START .'="23" '. GESHIFILTER_ATTRIBUTE_FANCY_N .'="7"'. $bracket_close .'<br />foo = "bar";<br />baz = "foz";<br />'. $bracket_open . $language_tag . $bracket_close .'</code>',
        t('Code block with syntax highlighting for @lang source code,<br />line numbers starting from 23<br /> and highlighted line numbers every 7<sup>th</sup> line.', array('@lang' => $languages[$tag_to_lang[$language_tag]])),
      );
    }
    $output .= theme('table', $header, $rows);
    return $output;
  }
  else {
    // get the available tags
    list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
    $tags = array();
    foreach ($generic_code_tags as $tag) {
      $tags[] = '<code>'. $bracket_open . $tag . $bracket_close .'</code>';
    }
    foreach ($language_tags as $tag) {
      $tags[] = '<code>'. $bracket_open . $tag . $bracket_close .'</code>';
    }
    $output = t('You can enable syntax highlighting of source code with the following tags: !tags.', array('!tags' => implode(', ', $tags)));
    if (_geshifilter_brackets($format) == GESHIFILTER_BRACKETS_BOTH) {
      $output .= ' '. t('Beside the tag style "!angle" it is also possible to use "!bracket".' , array('!angle' => '<code>&lt;foo&gt;</code>', '!bracket' => '<code>[foo]</code>'));
    }
    if (_geshifilter_php_delimeters($format)) {
      $output .= ' '. t('PHP source code can also be enclosed in &lt;?php ... ?&gt; or &lt;% ... %&gt;.');
    }
    return $output;
  }
}

/**
 * Implementation of hook_filter().
 */
function geshifilter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array('GeSHi filter');

    case 'description':
      return t('Enables syntax highlighting of inline/block source code using the GeSHi engine');

    case 'prepare':
      return _geshifilter_prepare($format, $text);

    case 'process':
      return _geshifilter_process($format, $text);

    case 'settings':
      return _geshifilter_filter_settings($format);

    case 'no cache':
      return false;

    default:
      return $text;
  }
}

/**
 * Implementation of hook_theme().
 */
function geshifilter_theme() {
  return array(
    'geshifilter_per_language_settings' => array(
      'arguments' => array('form' => NULL)
    )
  );
}

function _geshifilter_get_geshi_dir() {
  return variable_get('geshifilter_geshi_dir', drupal_get_path('module', 'geshifilter') .'/geshi');
}

/**
 * Helper function for loading/checking the GeSHi library v 1.0.x (if not already)
 * Returns an array with keys 'success', 'loaded' and 'message'
 */
function _geshifilter_check_geshi_library($use_cache=TRUE, $geshi_dir=NULL, $load_when_found=TRUE) {
  static $geshi_library_cache = NULL;
  if ($use_cache && $geshi_library_cache !== NULL) {
    // get from cache
    $geshi_library = $geshi_library_cache;
  }
  else {
    // initialisation
    $geshi_library = array('success' => NULL, 'loaded' => FALSE, 'message' => NULL);
    // no cache
    if (!$geshi_dir) {
      $geshi_dir = _geshifilter_get_geshi_dir();
    }
    if (!is_dir($geshi_dir)) {
      $geshi_library['success'] = FALSE;
      $geshi_library['message'] = t('GeSHi library error: %dir is not a directory.', array('%dir' => $geshi_dir));
    }
    elseif (is_file($geshi_dir .'/geshi.php')) {
      // GeSHi 1.0.x found (probably, we can only be sure by loading it)
      $geshi_library['success'] = TRUE;
      if ($load_when_found) {
        require_once($geshi_dir .'/geshi.php');
        // check version
        $geshi_library_version = explode('.', GESHI_VERSION);
        if (!($geshi_library_version[0] == '1' &&  $geshi_library_version[1] == '0')) {
          $geshi_library['success'] = FALSE;
          $geshi_library['loaded'] = FALSE;
          $geshi_library['message'] = t('GeSHi library error: The detected version of GeSHi library (%version) is not supported. A version from the 1.0.x branch is required.', array('%version' => GESHI_VERSION));
        }
        else {
          $geshi_library['loaded'] = TRUE;
        }
      }
    }
    else {
      $geshi_library['success'] = FALSE;
      $geshi_library['message'] = t('GeSHi library error: Could not find a known version of the GeSHi library at %dir.' , array('%dir' => $geshi_dir));
    }
    // store in cache if needed
    if ($use_cache) {
      $geshi_library_cache = $geshi_library;
    }
  }
  return $geshi_library;
}

/**
 * Helper function for some settings form fields usable as general and specific settings
 */
function _geshifilter_general_highlight_tags_settings($format=NULL) {
  $form = array();
  $f = ($format === NULL) ? '' : "_$format";
  // generic tags
  $form["geshifilter_tags$f"] = array(
    '#type' => 'textfield',
    '#title' => t('Generic syntax highlighting tags'),
    '#default_value' => geshifilter_tags($format),
    '#description' => t('Tags that should activate the GeSHi syntax highlighting. Specify a space-separated list of tagnames.')
  );
  // tag style
  $form["geshifilter_brackets$f"] = array(
    '#type' => 'select',
    '#title' => t('Tag style'),
    '#options' => array(
      GESHIFILTER_BRACKETS_ANGLE => '<foo>',
      GESHIFILTER_BRACKETS_SQUARE => '[foo]',
      GESHIFILTER_BRACKETS_BOTH => t('!angle or !square', array('!angle' => '<foo>', '!square' => '[foo]')),
    ),
    '#default_value' => _geshifilter_brackets($format),
    '#description' => t('Select which brackets should be used for the source code container tags.'),
  );
  // PHP specific delimiters
  $form['geshifilter']["geshifilter_enable_php_delimiters$f"] = array(
    '#type' => 'checkbox',
    '#title' => t('Also apply syntax highlighting to &lt;?php ... ?&gt; style PHP source code blocks.'),
    '#description' => t('When enabled, PHP source code enclosed in &lt;?php...?&gt or &lt;%...%&gt; will also be processed.'),
    '#default_value' => _geshifilter_php_delimeters($format),
  );
  return $form;
}

/**
 * Form (items) for filter settings.
 */
function _geshifilter_filter_settings($format) {
  $form = array();
  $form['geshifilter'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi filter'),
    '#collapsible' => TRUE,
  );
  if (geshifilter_use_format_specific_options()) {
    // tags and attributes
    $form['geshifilter']['general_tags'] = _geshifilter_general_highlight_tags_settings($format);
    // per language tags
    $form['geshifilter']['per_language_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Per language tags'),
      '#collapsible' => TRUE,
      'table' => geshifilter_per_language_settings($format, 'enabled', FALSE, TRUE),
    );
  }
  else {
    $form['geshifilter']['info'] = array(
      '#value' => '<p>'. t('The <a href="!geshi_admin_url">general settings</a> are used for the GeSHi filter . If you want specific settings per input format, you first have to enable this option in the <a href="!geshi_admin_url">general settings</a>.', array('!geshi_admin_url' => url('admin/settings/geshifilter'))) .'</p>'
    );
  }
  return $form;
}

/**
 * function for generating a form table for per language settings
 */
function geshifilter_per_language_settings($format, $view, $add_checkbox, $add_tag_option) {
  $form = array(
    '#theme' => 'geshifilter_per_language_settings',
  );
  // table header
  $form['header'] = array(
    '#type' => 'value',
    '#value' => array(),
  );
  $form['header']['#value'][] = t('Language');
  $form['header']['#value'][] = t('Language code');
  if ($add_tag_option) {
    $form['header']['#value'][] = t('Tags');
  }
  // table body
  $form['languages'] = array();
  $languages = _geshifilter_get_available_languages();
  foreach ($languages as $language => $language_data) {
    $enabled = variable_get("geshifilter_language_enabled_{$language}", FALSE);
    // skip items to hide
    if (($view == 'enabled' && !$enabled) || ($view == 'disabled' && $enabled)) {
      continue;
    }
    // build language row
    $form['languages'][$language] = array();
    // add enable/disable checkbox
    if ($add_checkbox) {
      $form['languages'][$language]["geshifilter_language_enabled_{$language}"] = array(
        '#type' => 'checkbox',
        '#default_value' => $enabled,
        '#title' => $language_data['fullname'],
      );
    }
    else {
      $form['languages'][$language]['fullname'] = array(
        '#type' => 'markup',
        '#value' => $language_data['fullname'],
      );
    }
    // language code
    $form['languages'][$language]['name'] = array(
      '#type' => 'markup',
      '#value' => $language,
    );
    // add a textfield for tags
    if ($add_tag_option) {
      $f = ($format === NULL) ? '' : "_$format";
      $form['languages'][$language]["geshifilter_language_tags_{$language}{$f}"] = array(
        '#type' => 'textfield',
        '#default_value' => geshifilter_language_tags($language, $format),
        '#size' => 20,
      );
    }
  }
  return $form;
}

/**
 * theming function for the per language settings table
 */
function theme_geshifilter_per_language_settings($form) {
  // build table body
  $rows = array();
  foreach (element_children($form['languages']) as $language) {
    $row = array();
    foreach (element_children($form['languages'][$language]) as $key) {
      $row[] = drupal_render($form['languages'][$language][$key]);
    }
    $rows[] = $row;
  }
  // build table header
  $header = array();
  foreach ($form['header']['#value'] as $cell) {
    if ($cell == t('Enabled')) {
      // add JavaScript 'select all/select none' stuff
      $header[] = array('data' => $cell) + theme('table_select_header_cell');
    }
    else {
      $header[] = $cell;
    }
  }
  // return themed table
  return theme('table', $header, $rows);
}

/**
 * Implementation of hook_requirements()
 */
function geshifilter_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    // check if GeSHi library is available
    $geshi_library = _geshifilter_check_geshi_library();
    if (!$geshi_library['loaded']) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library not found.'),
        'description' => t('You should install the GeSHi library and set its path in the !geshisettings.',
          array('!geshisettings' => l('GeSHi settings', 'admin/settings/geshifilter'))),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Found GeSHi library version %version',
          array('%version' => GESHI_VERSION)), // GESHI_VERSION is defined in GeSHi library
        'severity' => REQUIREMENT_OK,
      );
    }
    // check for filter conflicts
    require_once('geshifilter.admin.inc');
    if (geshifilter_admin_filter_conflicts(TRUE) > 0) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Some filter conflicts were detected.'),
        'description' => l(t('View and resolve the detected filter conflicts'), 'admin/settings/geshifilter/filterconflicts'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Helper function for splitting a string on white spaces.
 * Using explode(' ', $string) is not enough because it returns empty elements
 * if $string contains consecutive spaces.
 */
function _geshifilter_whitespace_explode($string) {
  return preg_split('/\s+/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

function _geshifilter_tag_split($string) {
  return preg_split('/\s+|<|>|\[|\]/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

// General settings
function geshifilter_use_format_specific_options() {
  return variable_get('geshifilter_format_specific_options', FALSE);
}

function geshifilter_tags($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_tags', 'code blockcode');
  }
  return variable_get("geshifilter_tags_{$format}", geshifilter_tags());
}

function _geshifilter_php_delimeters($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_enable_php_delimiters', FALSE);
  }
  return variable_get("geshifilter_enable_php_delimiters_{$format}", _geshifilter_php_delimeters());
}

function _geshifilter_brackets($format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL) {
    return variable_get('geshifilter_brackets', GESHIFILTER_BRACKETS_BOTH);
  }
  return variable_get("geshifilter_brackets_{$format}", _geshifilter_brackets());
}

function geshifilter_language_tags($language, $format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format === NULL)
    return variable_get("geshifilter_language_tags_{$language}", '');
  return variable_get("geshifilter_language_tags_{$language}_{$format}", geshifilter_language_tags($language));
}

/**
 * List of available languages.
 * @return an array mapping language code to array with the language path and full language name
 */
function _geshifilter_get_available_languages() {
  // try to get it from cache (database actually)
  $available_languages = variable_get('geshifilter_available_languages', NULL);
  if ($available_languages === NULL) {
    // not in cache: build the array of available_languages
    $geshi_library = _geshifilter_check_geshi_library();
    $available_languages = array();
    if ($geshi_library['success']) {
      $dirs = array(_geshifilter_get_geshi_dir() .'/geshi', drupal_get_path('module', 'geshifilter') .'/geshi-extra');
      foreach ($dirs as $dir) {
        foreach (file_scan_directory($dir, '\.[pP][hH][pP]$') as $filename => $fileinfo) {
          // short name
          $name = $fileinfo->name;
          // get full name
          $geshi = new GeSHi('', $name);
          $geshi->set_language_path($dir);
          $fullname = $geshi->get_language_name();
          unset($geshi);
          // store
          $available_languages[$name] = array('language_path' => $dir, 'fullname' => $fullname);
        }
      }
      ksort($available_languages);
      // save array to database
      variable_set('geshifilter_available_languages', $available_languages);
    }
  }
  return $available_languages;
}

/**
 * helper function for generating a GeSHi object
 * @param $language the language to generate a GeSHi object for
 */
function _geshifilter_geshi_factory($source_code, $language) {
  $available_languages = _geshifilter_get_available_languages();
  $geshi = new GeSHi($source_code, $language);
  $geshi->set_language_path($available_languages[$language]['language_path']);
  return $geshi;
}

/**
 * List of enabled languages.
 * (with caching)
 * @return array with enabled languages mapping language code to full name.
 */
function _geshifilter_get_enabled_languages() {
  static $enabled_languages = NULL;
  if ($enabled_languages === NULL) {
    $enabled_languages = array();
    $languages = _geshifilter_get_available_languages();
    foreach ($languages as $language => $language_data) {
      if (variable_get("geshifilter_language_enabled_{$language}", FALSE)) {
        $enabled_languages[$language] = $language_data['fullname'];
      }
    }
  }
  return $enabled_languages;
}

/**
 * Helper function for gettings the tags
 * (with caching)
 */
function _geshifilter_get_tags($format) {
  static $geshifilter_tags_cache = array();
  if (!isset($geshifilter_tags_cache[$format])) {
    $generic_code_tags = _geshifilter_tag_split(geshifilter_tags($format));
    $language_tags = array();
    $tag_to_lang = array();
    $enabled_languages = _geshifilter_get_enabled_languages();
    foreach ($enabled_languages as $language => $fullname) {
      $lang_tags = _geshifilter_tag_split(geshifilter_language_tags($language, $format));
      foreach ($lang_tags as $lang_tag) {
        $language_tags[] = $lang_tag;
        $tag_to_lang[$lang_tag] = $language;
      }
    }
    $geshifilter_tags_cache[$format] = array($generic_code_tags, $language_tags, $tag_to_lang);
  }
  return $geshifilter_tags_cache[$format];
}

/**
 * geshifilter_filter callback for preparing input text.
 */
function _geshifilter_prepare($format, $text) {
  // get the available tags
  list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
  $tags = array_merge($generic_code_tags, $language_tags);
  $tags_string = implode('|', $tags);
  // Pattern for matching "<code>...</code>" like stuff
  // Also matches "<code>...$"  where "$" refers to end of string, not end of
  // line (because PCRE_MULTILINE (modifier 'm') is not enabled), so matching
  // still works when teaser view trims inside the source code.
  switch (_geshifilter_brackets($format)) {
    case GESHIFILTER_BRACKETS_ANGLE:
      $pattern = '#(<)('. $tags_string .')([^>]*)(>)(.*?)(</\2\s*>|$)#s';
      break;
    case GESHIFILTER_BRACKETS_SQUARE:
      $pattern = '#(\[)('. $tags_string .')([^\]]*)(\])(.*?)(\[/\2\s*\]|$)#s';
      break;
    case GESHIFILTER_BRACKETS_BOTH:
      $pattern = '#([<\[])('. $tags_string .')([^>\]]*)([>\]])(.*?)(\1/\2\s*\4|$)#s';
      break;
  }
  // replace the code container tag brackets
  // and prepare the container content (newline and angle bracket protection)
  $text = preg_replace_callback($pattern, '_geshifilter_prepare_callback', $text);
  if (_geshifilter_php_delimeters($format)) {
    // prepare < ?php ... ? > blocks
    $text = preg_replace_callback('#[\[<](\?php|\?PHP|%)(.+?)(\?|%)[\]>]#s', '_geshifilter_prepare_php_callback', $text);
  }
  return $text;
}

/**
 * _geshifilter_prepare callback for preparing input text.
 * Replaces the code tags brackets with geshifilter specific ones to prevent
 * possible messing up by other filters, e.g.
 *   '[python]foo[/python]' to '[geshifilter-python]foo[/geshifilter-python]'.
 * Replaces newlines with "&#10;" to prevent issues with the line break filter
 * Escapes the tricky characters like angle brackets with check_plain() to
 * prevent messing up by other filters like the HTML filter.
 */
function _geshifilter_prepare_callback($match) {
  // get the default highlighting mode
  $lang = variable_get('geshifilter_default_highlighting', GESHIFILTER_DEFAULT_PLAINTEXT);
  if ($lang == GESHIFILTER_DEFAULT_DONOTHING) {
    // If the default highlighting mode is GESHIFILTER_DEFAULT_DONOTHING
    // and there is no language attribute, we should not do any escaping in this
    // prepare phase, so that other filters can do their thing.
    $language_attributes = _geshifilter_whitespace_explode(GESHIFILTER_ATTRIBUTES_LANGUAGE);
    $enabled_languages = _geshifilter_get_enabled_languages();
    $attributes_preg_string = implode('|', $language_attributes);
    // parse attributes
    preg_match_all('#('. $attributes_preg_string .')="?([^\s"]*)"?#', $match[2], $attribute_matches);
    foreach ($attribute_matches[1] as $a_key => $att_name) {
      $att_value = $attribute_matches[2][$a_key];
      // check for the language attributes
      if (in_array($att_name, $language_attributes) && array_key_exists($att_value, $enabled_languages)) {
        $lang = $att_value;
      }
    }
    if ($lang == GESHIFILTER_DEFAULT_DONOTHING) {
      // no language set by attributes: prevent escaping and return original string
      return $match[0];
    }
  }
  // return escaped code block
  return '[geshifilter-'. $match[2] . $match[3] .']'
    . str_replace(array("\r", "\n"), array('', '&#10;'), check_plain($match[5]))
    .'[/geshifilter-'. $match[2] .']';
}

/**
 * _geshifilter_prepare callback for < ?php ... ? > blocks
 */
function _geshifilter_prepare_php_callback($match) {
  return '[geshifilter-questionmarkphp]'
    . str_replace(array("\r", "\n"), array('', '&#10;'), check_plain($match[2]))
    .'[/geshifilter-questionmarkphp]';
}

/**
 * geshifilter_filter callback for processing input text.
 */
function _geshifilter_process($format, $text) {
  // load GeSHi library (if not already)
  $geshi_library = _geshifilter_check_geshi_library();
  if (!$geshi_library['success']) {
    drupal_set_message($geshi_library['message'], 'error');
    return $text;
  }
  // get the available tags
  list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
  if (_geshifilter_php_delimeters($format)) {
    $language_tags[] = 'questionmarkphp';
    $tag_to_lang['questionmarkphp'] = 'php';
  }
  $tags = array_merge($generic_code_tags, $language_tags);
  $tags_string = implode('|', $tags);
  // Pattern for matching the prepared "<code>...</code>" stuff
  $pattern = '#\\[geshifilter-('. $tags_string .')([^\\]]*)\\](.*?)(\\[/geshifilter-\1\\])#s';
  $text = preg_replace_callback($pattern, '_geshifilter_replace_callback', $text);
  return $text;
}

/**
 * preg_replace_callback callback
 */
function _geshifilter_replace_callback($match) {
  // $match[0]: complete matched string
  // $match[1]: tag name
  // $match[2]: tag attributes
  // $match[3]: tag content
  $complete_match = $match[0];
  $tag_name = $match[1];
  $tag_attributes = $match[2];
  $source_code = $match[3];

  // Undo linebreak and escaping from preparation phase
  $source_code = decode_entities($source_code);

  // get the possible tags and languages
  list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
  if (variable_get('geshifilter_enable_php_delimiters', FALSE)) {
    $language_tags[] = 'questionmarkphp';
    $tag_to_lang['questionmarkphp'] = 'php';
  }

  $enabled_languages = _geshifilter_get_enabled_languages();

  $language_attributes = _geshifilter_whitespace_explode(GESHIFILTER_ATTRIBUTES_LANGUAGE);
  $attributes_preg_string = implode('|', array_merge(
    $language_attributes,
    array(GESHIFILTER_ATTRIBUTE_LINE_NUMBERING, GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START, GESHIFILTER_ATTRIBUTE_FANCY_N)
  ));

  // default settings
  $lang = variable_get('geshifilter_default_highlighting', GESHIFILTER_DEFAULT_PLAINTEXT);
  $line_numbering = variable_get('geshifilter_default_line_numbering', GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE);
  $linenumbers_start = 1;

  // determine language based on tag name if possible
  if (isset($tag_to_lang[$tag_name])) {
    $lang = $tag_to_lang[$tag_name];
  }

  // parse attributes (for language and line numbers)
  preg_match_all('#('. $attributes_preg_string .')="?([^\s"]*)"?#', $tag_attributes, $attribute_matches);
  // $attribute_matches[0][xx] .... fully matched string type="language"
  // $attribute_matches[1][xx] .... param name
  // $attribute_matches[2][xx] .... param value
  foreach ($attribute_matches[1] as $a_key => $att_name) {
    $att_value = $attribute_matches[2][$a_key];
    // check for the language attributes
    if (in_array($att_name, $language_attributes) && array_key_exists($att_value, $enabled_languages)) {
      $lang = $att_value;
    }
    // check for line numbering related attributes
    // $line_numbering defines the line numbering mode:
    // 0: no line numbering
    // 1: normal line numbering
    // n>= 2: fancy line numbering every nth line
    elseif ($att_name == GESHIFILTER_ATTRIBUTE_LINE_NUMBERING) {
      switch (strtolower($att_value)) {
        case "off":
          $line_numbering = 0;
          break;
        case "normal":
          $line_numbering = 1;
          break;
        case "fancy":
          $line_numbering = 5;
          break;
      }
    }
    elseif ($att_name == GESHIFILTER_ATTRIBUTE_FANCY_N) {
      $att_value = (int)($att_value);
      if ($att_value >= 2) {
        $line_numbering = $att_value;
      }
    }
    elseif ($att_name == GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START) {
      if ($line_numbering < 1) {
        $line_numbering = 1;
      }
      $linenumbers_start = (int)($att_value);
    }
  }

  if ($lang == GESHIFILTER_DEFAULT_DONOTHING) {
    // do nothing, and return the original
    return $complete_match;
  }

  if ($lang == GESHIFILTER_DEFAULT_PLAINTEXT) {
    // use plain text 'highlighting'
    $lang = 'text';
  }
  $inline_mode = (strpos($source_code, "\n") === FALSE);
  // process and return
  return geshifilter_process($source_code, $lang, $line_numbering, $linenumbers_start, $inline_mode);
}

/**
 * Helper function for overriding some GeSHi defaults
 */
function _geshifilter_override_geshi_defaults(&$geshi, $langcode) {
  // override the some default GeSHi styles (e.g. GeSHi uses Courier by default, which is ugly)
  $geshi->set_line_style('font-family: monospace; font-weight: normal;', 'font-family: monospace; font-weight: bold; font-style: italic;');
  $geshi->set_code_style('font-family: monospace; font-weight: normal; font-style: normal');
  // overall class needed for CSS
  $geshi->set_overall_class('geshifilter-'. $langcode);
  // set keyword linking
  $geshi->enable_keyword_links(variable_get('geshifilter_enable_keyword_urls', TRUE));
}

/**
 * General geshifilter processing function
 */
function geshifilter_process($source_code, $lang, $line_numbering=0, $linenumbers_start=1, $inline_mode=FALSE) {
  // process
  if ($lang == 'php' && variable_get('geshifilter_use_highlight_string_for_php', FALSE)) {
    return geshifilter_highlight_string_process($source_code, $inline_mode);
  }
  else {
    // process with GeSHi
    return geshifilter_geshi_process($source_code, $lang, $line_numbering, $linenumbers_start, $inline_mode);
  }
}

/**
 * geshifilter wrapper for GeSHi processing.
 */
function geshifilter_geshi_process($source_code, $lang, $line_numbering=0, $linenumbers_start=1, $inline_mode=FALSE) {
  // load GeSHi library (if not already)
  $geshi_library = _geshifilter_check_geshi_library();
  if (!$geshi_library['loaded']) {
    drupal_set_message($geshi_library['message'], 'error');
    return $source_code;
  }
  // remove leading/trailing newlines
  $source_code = trim($source_code, "\n\r");
  // create GeSHi object
  $geshi = _geshifilter_geshi_factory($source_code, $lang);

  // CSS mode
  if (variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE) == GESHIFILTER_CSS_CLASSES) {
    $geshi->enable_classes(TRUE);
  }
  _geshifilter_override_geshi_defaults($geshi, $lang);
  // some more GeSHi settings and parsing
  if ($inline_mode) {
    // inline source code mode
    $geshi->set_header_type(GESHI_HEADER_NONE);
    $source_code = '<span class="geshifilter"><code class="'. $geshi->overall_class .'">'. $geshi->parse_code() .'</code></span>';
  }
  else {
    // block source code mode
    $geshi->set_header_type((int)variable_get('geshifilter_code_container', GESHI_HEADER_PRE));
    if ($line_numbering == 1) {
      $geshi->enable_line_numbers(GESHI_NORMAL_LINE_NUMBERS);
      $geshi->start_line_numbers_at($linenumbers_start);
    }
    elseif ($line_numbering >= 2) {
      $geshi->enable_line_numbers(GESHI_FANCY_LINE_NUMBERS, $line_numbering);
      $geshi->start_line_numbers_at($linenumbers_start);
    }
    $source_code = '<div class="geshifilter">'. $geshi->parse_code() .'</div>';
  }
  return $source_code;
}

/**
 * geshifilter wrapper for highlight_string() processing of PHP
 */
function geshifilter_highlight_string_process($source_code, $inline_mode) {
  // Make sure that the source code starts with < ?php and ends with ? >
  $text = trim($source_code);
  if (substr($text, 0, 5) != '<?php') {
    $source_code = '<?php'. $source_code;
  }
  if (substr($text, -2) != '?>') {
    $source_code = $source_code .'?>';
  }
  // Use the right container
  $container = $inline_mode ? 'span' : 'div';
  // Process with highlight_string()
  $text = '<'. $container .' class="codeblock geshifilter">'. highlight_string($source_code, TRUE) .'</'. $container .'>';
  // Remove newlines (added by highlight_string()) to avoid issues with the linebreak filter
  $text = str_replace("\n", '', $text);
  return $text;
}
