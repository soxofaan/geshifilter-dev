<?php
// $Id$

// @todo: test the tag style widget, both on general settings form and format specific form:  at least one tag style should be selected.

/**
* Funcional tests for the GeSHi filter administration.
*/
class GeshiFilterAdministrationTest extends DrupalWebTestCase {

  /**
   * A global filter adminstrator
   */
  protected $filter_admin_user;

  /**
   * The id of the input format with only GeSHi filter in it
   */
  protected $input_format_id;

  /**
   * Drupal SimpleTest method: return metadata about the test.
   */
  function getInfo() {
    return array(
      'name'  => t('GeSHi filter administration'),
      'description'  => t('Test the GeSHi filter administration.'),
      'group' => t('GeSHi filter module'),
    );
  }

  /**
   * SimpleTest core method: code run before each and every test method.
   *
   * Optional. You only need this if you have setup tasks.
   */
  function setUp() {
    // Make sure the GeSHi filter module is enabled.
    parent::setUp('geshifilter');
    // And set the path to the geshi library.
    variable_set('geshifilter_geshi_dir','sites/all/libraries/geshi');

    // Create a filter admin user
    $permissions = array('administer filters', 'administer site configuration');
    $this->filter_admin_user = $this->drupalCreateUser($permissions);

    // log in with filter admin user
    $this->drupalLogin($this->filter_admin_user);

    // add an input format with only geshi filter
    $edit = array(
      'name' => $this->randomName(10, 'inputformat_'),
      'filters[geshifilter/0]' => TRUE,
      'roles[2]' => TRUE,
    );
    $this->drupalPost('admin/settings/filters/add', $edit, t('Save configuration'));
    // store the format id of the created input format
    $this->input_format_id = db_result(db_query("SELECT format FROM {filter_formats} WHERE name = '%s'", $edit['name']));
    $this->assertTrue($this->input_format_id, t('Input format id (%s)'));

    // set some default GeSHi filter admin settings
    variable_set('geshifilter_format_specific_options', FALSE);
    variable_set('geshifilter_tag_styles', array(
      GESHIFILTER_BRACKETS_ANGLE => GESHIFILTER_BRACKETS_ANGLE,
      GESHIFILTER_BRACKETS_SQUARE => GESHIFILTER_BRACKETS_SQUARE,
    ));
    variable_set('geshifilter_default_line_numbering', GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE);

  }

  /**
   * SimpleTest core method: code run after each and every test method.
   *
   * Optional. You only need this if you have setup tasks.
   */
  function tearDown() {
    // Remove input format.
    $this->drupalPost('admin/settings/filters/delete/'. $this->input_format_id, array(), t('Delete'));

    // Always call the tearDown() function from the parent class.
    parent::tearDown();
  }

  /**
   * Check tag unicity: tags should differ between languages and from generic tags
   */
  function test_tag_unicity() {
    // enable some languages first
    variable_set('geshifilter_language_enabled_php', TRUE);
    variable_set('geshifilter_language_enabled_python', TRUE);

    // first round: without format specific tag options
    variable_set('geshifilter_format_specific_options', FALSE);
    variable_set('geshifilter_tags', 'code blockcode generictag');

    // a language tag should differ from the generic tags
    $form_values = array(
      'geshifilter_language_tags_php' => 'php generictag',
    );
    $this->drupalPost('admin/settings/geshifilter/languages', $form_values, t('Save configuration'));
    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ from generic tags (with generic tag options)'));

    // language tags should differ between languages
    $form_values = array(
      'geshifilter_language_tags_php' => 'php languagetag',
      'geshifilter_language_tags_python' => 'languagetag python',
    );
    $this->drupalPost('admin/settings/geshifilter/languages/all', $form_values, t('Save configuration'));
    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ between languages (with generic tag options)'));

    // second round: with format specific tag options
    variable_set('geshifilter_format_specific_options', TRUE);
    variable_set('geshifilter_tags_' . $this->input_format_id, 'code blockcode generictag');

    // a language tag should differ from the generic tags
    $form_values = array(
      'geshifilter_language_tags_php_' . $this->input_format_id => 'php generictag',
    );
    $this->drupalPost('admin/settings/filters/' . $this->input_format_id . '/configure', $form_values, t('Save configuration'));
    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ from generic tags (with format specific tag options)'));

    // language tags should differ between languages
    $form_values = array(
      'geshifilter_language_tags_php_' . $this->input_format_id => 'php languagetag',
      'geshifilter_language_tags_python_' . $this->input_format_id => 'languagetag python',
    );
    $this->drupalPost('admin/settings/filters/' . $this->input_format_id . '/configure', $form_values, t('Save configuration'));
    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ between languages (with format specific tag options)'));

  }

}
