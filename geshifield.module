<?php
// $Id$

/**
 * @file
 * Defines a field for source code with GeSHi syntax highlighting.
 */

/**
 * Implementation of hook_theme().
 */
function geshifield_theme() {
  return array(
    'geshifield_textarea' => array( 
       'arguments' => array('element' => NULL), 
    ),
    'geshifield_formatter_default' => array( 
       'arguments' => array('element' => NULL), 
    ),
    'geshifield_formatter_nohighlighting' => array( 
       'arguments' => array('element' => NULL), 
    ),
    'geshifield_formatter_trimmed' => array( 
       'arguments' => array('element' => NULL), 
    ),
  );
}


/**
 * Implementation of hook_field_info().
 */
function geshifield_field_info() {
  return array(
    'geshifield' => array(
      'label' => t('Source code text field'),
      'description' => t('Source code textfield with GeSHi syntax highlighting.'),
    )
  );
}

/**
 * Implementation of hook_field_settings().
 */
function geshifield_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns =  array(
        'sourcecode' => array(
          'type' => 'longtext',
          'not null' => FALSE,
          'sortable' => TRUE,
        ),
        'language' => array(
          'type' => 'varchar',
          'length' => 32,
          'not null' => FALSE,
          'sortable' => TRUE,
        ),
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function geshifield_field($op, &$node, $field, &$items, $teaser, $page) {
  // Nothing to do here.
  // Typically only the validition operation is needed in this hook
  // but for geshifield even this is not needed.
}

/**
 * Implementation of hook_content_is_empty().
 */
function geshifield_content_is_empty($item, $field) {
  return empty($item['sourcecode']);
}


/*
 * Implementation of hook_default_value().
 */
function geshifield_default_value(&$form, &$form_state, $field, $delta) {
  return 'print("hello world")';
}

/**
 * Implementation of hook_widget_info().
 */
function geshifield_widget_info() {
  return array(
    'geshifield_textarea' => array(
      'label' => t('Source code text area'),
      'field types' => array('geshifield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),  
    ),
  );
  // @TODO provide a file upload widget too.
}

/**
 * Implementation of hook_elements().
 */
function geshifield_elements() {
  $elements = array(
    'geshifield_textarea' => array(
      '#input' => TRUE,
      '#process' => array('geshifield_textarea_process' ),
    ),
  );
  return $elements;  
}

/**
 * Process callback for geshifield_textarea widget.
 */
function geshifield_textarea_process($element, $edit, &$form_state, $form) {
  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);
  $enabled_languages = _geshifilter_get_enabled_languages();
  
  $element['sourcecode'] = array(
    '#type' => 'textarea',
    '#title' => t($field['widget']['label']),
    '#default_value' => $defaults['sourcecode'],
    '#required' => $field['required'],
    '#rows' => $field['widget']['rows'],
    '#description' => t($field['widget']['description']),
  );
    
  $element['language'] = array(
    '#type' => 'select',
    '#title' => t('Syntax highlighting mode'),
    '#default_value' => $defaults['language'],
    '#options' => $enabled_languages,
    '#description' => t('Select the syntax highlighting mode to use for the source code.'),
  );
  
  return $element;
}

/**
 * Theming function for the geshifield_textarea widget
 */
function theme_geshifield_textarea(&$element) {
  return theme( 'form_element', $element, $element['#children'] );
}


/**
 * Implementation of hook_widget_settings().
 */
function geshifield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['rows'] = array(
        '#type' => 'textfield',
        '#title' => t('Rows'),
        '#default_value' => $widget['rows'] ? $widget['rows'] : 20,
        '#required' => TRUE,
      );
      return $form;

    case 'validate':
      if (!is_numeric($widget['rows']) || intval($widget['rows']) != $widget['rows'] || $widget['rows'] <= 0 || $widget['rows'] > 100) {
        form_set_error('rows', t('"Rows" must be a positive integer.'));
      }
      break;

    case 'save':
      return array('rows');
  }
}

/**
 * Implementation of hook_widget().
 */
function geshifield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function geshifield_field_formatter_info() {
  $formatters = array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('geshifield'),
    ),
    'nohighlighting' => array(
      'label' => t('No syntax highlighting'),
      'field types' => array('geshifield'),
    ),
    'trimmed' => array(
      'label' => t('Trimmed'),
      'field types' => array('geshifield'),
    ),
  );
  return $formatters;
}


function theme_geshifield_formatter_default($element) {
  return geshifilter_geshi_process($element['#item']['sourcecode'], $element['#item']['language']);
}

function theme_geshifield_formatter_nohighlighting($element) {
  return geshifilter_geshi_process($element['#item']['sourcecode'], 'text');
}

function theme_geshifield_formatter_trimmed($element) {
  return geshifilter_geshi_process(node_teaser($element['#item']['sourcecode']), $element['#item']['language']);
}
